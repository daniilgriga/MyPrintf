     1                                  
     2                                  ; |=================================================|
     3                                  ; | <---------------------------------------------> |
     4                                  ; | <------------> MyPrintf FUNCTION <------------> |
     5                                  ; | <---------------------------------------------> |
     6                                  ; |=================================================|
     7                                  
     8                                  section .text
     9                                  
    10                                  global MyPrintf
    11                                  
    12                                  MyPrintf:
    13                                  
    14 00000000 415F                            pop r15                                         ; return address
    15                                  
    16 00000002 4151                            push r9                                         ; 6th argument
    17 00000004 4150                            push r8                                         ; 5th
    18 00000006 51                              push rcx                                        ; 4th
    19 00000007 52                              push rdx                                        ; 3th
    20 00000008 56                              push rsi                                        ; 2th
    21 00000009 57                              push rdi                                        ; 1th
    22                                  
    23 0000000A E819000000                      call Parcing
    24                                  
    25 0000000F 4981FE9A020000                  cmp r14, 666                                    ; if error
    26 00000016 7405                            je .exit
    27                                  
    28 00000018 E8FB000000                      call FlushBuffer
    29                                  
    30                                  .exit:
    31 0000001D 5F                              pop rdi
    32 0000001E 5E                              pop rsi
    33 0000001F 5A                              pop rdx
    34 00000020 59                              pop rcx
    35 00000021 4158                            pop r8
    36 00000023 4159                            pop r9
    37                                  
    38 00000025 4157                            push r15
    39                                  
    40 00000027 C3                              ret
    41                                  
    42                                  ;=============================================================================
    43                                  ; Parcing string func
    44                                  ; Entry:        all arguments in stack
    45                                  ; Exit:
    46                                  ; Destr:                                                                   !!!
    47                                  ;=============================================================================
    48                                  Parcing:
    49                                  
    50 00000028 55                              push rbp
    51 00000029 4889E5                          mov rbp, rsp
    52 0000002C 488B7510                        mov rsi, [rbp + 16]
    53                                  
    54 00000030 E8D8010000                      call StrLen
    55                                  
    56 00000035 4C8B1C25[17100000]              mov r11, [buf_position]
    57                                  
    58 0000003D 4C89D8                          mov rax, r11
    59 00000040 4801C8                          add rax, rcx
    60 00000043 483D00100000                    cmp rax, BUFFER_SIZE
    61 00000049 7E0B                            jle .continue
    62                                  
    63 0000004B E8C8000000                      call FlushBuffer
    64 00000050 41BB00000000                    mov r11, 0
    65                                  
    66                                  .continue:
    67                                  
    68 00000056 4D31D2                          xor r10, r10
    69 00000059 4D31E4                          xor r12, r12
    70                                  
    71                                  next_parcing:
    72 0000005C 8A06                            mov al, [rsi]
    73                                  
    74 0000005E 3C00                            cmp al, 0
    75 00000060 740E                            je exit_parcing
    76                                  
    77 00000062 3C25                            cmp al, '%'
    78 00000064 740F                            je PercentHandler
    79                                  
    80 00000066 E892000000                      call CharCopy
    81 0000006B 48FFC6                          inc rsi
    82 0000006E EBEC                            jmp next_parcing
    83                                  
    84                                  exit_parcing:
    85 00000070 4889EC                          mov rsp, rbp
    86 00000073 5D                              pop rbp
    87                                  
    88 00000074 C3                              ret
    89                                  
    90                                  PercentHandler:
    91 00000075 49FFC4                          inc r12
    92 00000078 48FFC6                          inc rsi
    93 0000007B 4831C0                          xor rax, rax
    94                                  
    95 0000007E 8A06                            mov al, [rsi]
    96 00000080 488B04C5[0F0D0000]              mov rax, [jump_table + (rax - 'b')*8]
    97 00000088 FFE0                            jmp rax
    98                                  
    99                                  Error:
   100                                  
   101 0000008A B801000000                      mov rax, 0x01
   102 0000008F BF01000000                      mov rdi, 1
   103 00000094 48BE-                           mov rsi, ErrorMessage
   103 00000096 [0000000000000000] 
   104 0000009E BA0D000000                      mov rdx, ErrorMessageLen
   105 000000A3 0F05                            syscall
   106                                  
   107 000000A5 41BE9A020000                    mov r14, 666                                    ; error code
   108 000000AB EBC3                            jmp exit_parcing
   109                                  
   110                                  Binary:
   111 000000AD 4C8B1C25[17100000]              mov r11, [buf_position]
   112 000000B5 4A6354E510                      movsxd rdx, [rbp + 16 + r12*8]
   113                                  
   114 000000BA E88F000000                      call ConvertBin
   115                                  
   116 000000BF 48FFC6                          inc rsi
   117 000000C2 4C891C25[17100000]              mov [buf_position], r11
   118 000000CA EB90                            jmp next_parcing
   119                                  
   120                                  Char:
   121 000000CC 4A6344E510                      movsxd rax, [rbp + 16 + r12*8]
   122                                  
   123 000000D1 E827000000                      call CharCopy
   124                                  
   125 000000D6 48FFC6                          inc rsi
   126 000000D9 EB81                            jmp next_parcing
   127                                  
   128                                  Decimal:
   129 000000DB 4C8B1C25[17100000]              mov r11, [buf_position]
   130 000000E3 4A6354E510                      movsxd rdx, [rbp + 16 + r12*8]                  ; save my life... (int 32 bites)
   131                                  
   132 000000E8 E8A6000000                      call ConvertHex
   133                                  
   134 000000ED 48FFC6                          inc rsi
   135 000000F0 4C891C25[17100000]              mov [buf_position], r11
   136 000000F8 E95FFFFFFF                      jmp next_parcing
   137                                  
   138                                  ;=============================================================================
   139                                  ; Copy one symbol to buffer
   140                                  ; Entry:        al - symbol
   141                                  ; Exit:
   142                                  ; Destr: R11                                                               !!!
   143                                  ;=============================================================================
   144                                  CharCopy:
   145                                  
   146 000000FD 4C8B1C25[17100000]              mov r11, [buf_position]
   147 00000105 418883[17000000]                mov [buffer + r11], al
   148 0000010C 49FFC3                          inc r11
   149 0000010F 4C891C25[17100000]              mov [buf_position], r11
   150                                  
   151 00000117 C3                              ret
   152                                  
   153                                  ;=============================================================================
   154                                  ; Func to Flush the Buffer
   155                                  ; Entry:
   156                                  ; Exit:
   157                                  ; Destr: RAX, RDI, RSI, RDX                                                !!!
   158                                  ;=============================================================================
   159                                  FlushBuffer:
   160                                  
   161 00000118 48833C25[17100000]-             cmp qword [buf_position], 0
   161 00000120 00                 
   162 00000121 742A                            je .exit
   163                                  
   164 00000123 B801000000                      mov rax, 1
   165 00000128 BF01000000                      mov rdi, 1
   166 0000012D 48BE-                           mov rsi, buffer
   166 0000012F [1700000000000000] 
   167 00000137 488B1425[17100000]              mov rdx, [buf_position]
   168 0000013F 0F05                            syscall
   169                                  
   170 00000141 48C70425[17100000]-             mov qword [buf_position], 0
   170 00000149 00000000           
   171                                  
   172                                  .exit:
   173 0000014D C3                              ret
   174                                  
   175                                  
   176                                  ;=============================================================================
   177                                  ; Convert to Binary number
   178                                  ; Entry:        dl = number
   179                                  ;               r11 = buf_pos
   180                                  ; Exit:
   181                                  ; Destr: RDX, RAX, RCX                                                     !!!
   182                                  ;=============================================================================
   183                                  ConvertBin:
   184                                  
   185 0000014E B91F000000                      mov rcx, 31                                     ; 31 bites (0th bit - sign)
   186                                  
   187 00000153 80FA00                          cmp dl, 0
   188 00000156 7E1B                            jng .convert
   189                                  
   190                                  .find_first:
   191 00000158 4889D0                          mov rax, rdx
   192 0000015B 48D3E8                          shr rax, cl
   193 0000015E 4883E001                        and rax, 1
   194 00000162 4883F801                        cmp rax, 1                                      ; find first 1 for leading zeros
   195 00000166 740B                            je .convert
   196 00000168 48FFC9                          dec rcx
   197 0000016B 4883F9FF                        cmp rcx, -1
   198 0000016F 7402                            je .convert
   199 00000171 EBE5                            jmp .find_first
   200                                  
   201                                  .convert:
   202 00000173 4889D0                          mov rax, rdx
   203 00000176 48D3E8                          shr rax, cl
   204 00000179 4883E001                        and rax, 1
   205 0000017D 8A80[0D000000]                  mov al, [digits + rax]                          ; ASCII
   206 00000183 418883[17000000]                mov [buffer + r11], al
   207 0000018A 49FFC3                          inc r11
   208 0000018D 48FFC9                          dec rcx
   209 00000190 79E1                            jns .convert                                    ; checks SF flag (rcx = -1 -> SF = 1)
   210                                  
   211 00000192 C3                              ret
   212                                  
   213                                  ;=============================================================================
   214                                  ; Convert Hex to good numbers
   215                                  ; Entry:        dl = number
   216                                  ;               r11 = buf_pos
   217                                  ; Exit:
   218                                  ; Destr: RBX, RAX, RCX, RDX                                                !!!
   219                                  ;=============================================================================
   220                                  ConvertHex:
   221                                  
   222 00000193 4889D3                          mov rbx, rdx
   223                                  
   224 00000196 4D89DD                          mov r13, r11
   225 00000199 80FA00                          cmp dl, 0
   226 0000019C 7D11                            jge .positive                                   ; >= 0
   227                                  
   228 0000019E 41C685[17000000]2D              mov byte [buffer + r13], '-'
   229 000001A6 49FFC5                          inc r13
   230 000001A9 49FFC3                          inc r11
   231 000001AC 48F7DB                          neg rbx
   232                                  
   233                                  .positive:
   234 000001AF 4831D2                          xor rdx, rdx
   235 000001B2 4889D8                          mov rax, rbx
   236 000001B5 BB0A000000                      mov rbx, 10
   237 000001BA 48F7F3                          div rbx                                         ; rax - quotient, rdx - remainder
   238                                  
   239 000001BD 4889C3                          mov rbx, rax
   240 000001C0 4831C0                          xor rax, rax
   241 000001C3 8A82[0D000000]                  mov al, [digits + rdx]                          ; ASCII
   242 000001C9 418885[17000000]                mov [buffer + r13], al
   243 000001D0 49FFC5                          inc r13
   244 000001D3 4883FB00                        cmp rbx, 0
   245 000001D7 7FD6                            jg .positive                                    ; signed greater
   246                                  
   247 000001D9 4831C0                          xor rax, rax
   248 000001DC 4831DB                          xor rbx, rbx
   249                                  
   250 000001DF 4155                            push r13
   251                                  
   252                                  .turn_over:
   253 000001E1 4D39EB                          cmp r11, r13
   254 000001E4 7D24                            jge .exit
   255                                  
   256 000001E6 418A85[16000000]                mov al, [buffer + r13 - 1]
   257 000001ED 418A9B[17000000]                mov bl, [buffer + r11]
   258 000001F4 41889D[16000000]                mov [buffer + r13 - 1], bl
   259 000001FB 418883[17000000]                mov [buffer + r11], al
   260                                  
   261 00000202 49FFC3                          inc r11
   262 00000205 49FFCD                          dec r13
   263 00000208 EBD7                            jmp .turn_over
   264                                  
   265                                  .exit:
   266 0000020A 415B                            pop r11
   267                                  
   268 0000020C C3                              ret
   269                                  
   270                                  ;=============================================================================
   271                                  ; Count length of string
   272                                  ; Entry:        rsi = string offset
   273                                  ; Exit:         rcx = length of string
   274                                  ; Destr: AL                                                                !!!
   275                                  ;=============================================================================
   276                                  StrLen:
   277                                  
   278 0000020D 53                              push rbx
   279 0000020E 4889F3                          mov rbx, rsi
   280 00000211 4831C9                          xor rcx, rcx
   281                                  .cycle:
   282 00000214 8A03                            mov al, [rbx]
   283 00000216 3C00                            cmp al, 0
   284 00000218 7407                            je .match
   285                                  
   286 0000021A FEC1                            inc cl
   287 0000021C 48FFC3                          inc rbx
   288 0000021F EBF3                            jmp .cycle
   289                                  
   290                                  .match:
   291 00000221 5B                              pop rbx
   292                                  
   293 00000222 C3                              ret
   294                                  
   295                                  
   296                                  
   297                                  section .data
   298                                  
   299                                  ASCII_NULL      equ  "0"
   300                                  ASCII_NINE      equ  "9"
   301                                  ASCII_A         equ  "A"
   302                                  ASCII_F         equ  "F"
   303                                  ASCII_SPACE     equ  " "
   304                                  ASCII_SL_N      equ  0Ah
   305                                  ASCII_SL_R      equ  0Dh
   306                                  
   307                                  BUFFER_SIZE     equ  4096                               ; Linux page memory size
   308                                  
   309 00000000 53796E746178206572-     ErrorMessage    db      "Syntax error!"
   309 00000009 726F7221           
   310                                  ErrorMessageLen equ      $ - ErrorMessage
   311                                  
   312 0000000D 303132333435363738-     digits:         db      "0123456789"
   312 00000016 39                 
   313 00000017 00<rep 1000h>           buffer          times BUFFER_SIZE  db  0                ; BUFFER_SIZE times 0 byte
   314 00001017 0000000000000000        buf_position:   dq      0                               ; 8 byte (to match the size of the registers)
   315                                  
   316                                  jump_table:
   317 0000101F [AD00000000000000]                              dq Binary
   318 00001027 [CC00000000000000]                              dq Char
   319 0000102F [DB00000000000000]                              dq Decimal
   320 00001037 [8A00000000000000]-      times ('o' - 'd' - 1)  dq Error
   320 00001037 <rep Ah>           
   321                                  ;                        dq Octal
   322                                  ;  times ('s' - 'o' - 1) dq Error
   323                                  ;                        dq String
   324                                  ;  times ('x' - 's' - 1) dq Error
   325                                  ;                        dq Hexademical
