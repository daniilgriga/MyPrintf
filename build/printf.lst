     1                                  
     2                                  ; |=================================================|
     3                                  ; | <---------------------------------------------> |
     4                                  ; | <------------> MyPrintf FUNCTION <------------> |
     5                                  ; | <---------------------------------------------> |
     6                                  ; |=================================================|
     7                                  
     8                                  section .text
     9                                  
    10                                  global MyPrintf
    11                                  
    12                                  MyPrintf:
    13                                  
    14 00000000 415A                            pop r10                                         ; return address
    15                                  
    16 00000002 4151                            push r9                                         ; 6th argument
    17 00000004 4150                            push r8                                         ; 5th
    18 00000006 51                              push rcx                                        ; 4th
    19 00000007 52                              push rdx                                        ; 3th
    20 00000008 56                              push rsi                                        ; 2th
    21 00000009 57                              push rdi                                        ; 1th
    22                                  
    23 0000000A EB0B                            jmp Parsing
    24                                  
    25                                  return:
    26 0000000C 5F                              pop rdi
    27 0000000D 5E                              pop rsi
    28 0000000E 5A                              pop rdx
    29 0000000F 59                              pop rcx
    30 00000010 4158                            pop r8
    31 00000012 4159                            pop r9
    32                                  
    33 00000014 4152                            push r10
    34                                  
    35 00000016 C3                              ret
    36                                  
    37                                  ;=============================================================================
    38                                  ; Parsing string func
    39                                  ; Entry:        all arguments in stack
    40                                  ; Exit:
    41                                  ; Destr:                                                                   !!!
    42                                  ;=============================================================================
    43                                  Parsing:
    44                                  
    45 00000017 55                              push rbp
    46 00000018 4889E5                          mov rbp, rsp
    47 0000001B 488B7508                        mov rsi, [rbp + 8]
    48                                  
    49 0000001F E89D030000                      call StrLen
    50                                  
    51 00000024 4C8B1C25[1E100000]              mov r11, [buf_position]
    52                                  
    53 0000002C 4C89D8                          mov rax, r11
    54 0000002F 4801C8                          add rax, rcx
    55 00000032 483D00100000                    cmp rax, BUFFER_SIZE
    56 00000038 7E0D                            jle .continue
    57                                  
    58 0000003A E8AE010000                      call FlushBuffer
    59 0000003F C60425[1E100000]00              mov byte [buf_position], 0
    60                                  
    61                                  .continue:
    62 00000047 4D31E4                          xor r12, r12
    63                                  
    64                                  next_parsing:
    65 0000004A 8A06                            mov al, [rsi]
    66                                  
    67 0000004C 3C00                            cmp al, 0
    68 0000004E 740E                            je exit_parsing
    69                                  
    70 00000050 3C25                            cmp al, '%'
    71 00000052 741D                            je PercentHandler
    72                                  
    73 00000054 E879010000                      call CharCopy
    74 00000059 48FFC6                          inc rsi
    75 0000005C EBEC                            jmp next_parsing
    76                                  
    77                                  exit_parsing:
    78 0000005E 483D9A020000                    cmp rax, 666                                    ; if error code
    79 00000064 7405                            je .skip_flush
    80 00000066 E882010000                      call FlushBuffer
    81                                  
    82                                  .skip_flush:
    83 0000006B 4889EC                          mov rsp, rbp
    84 0000006E 5D                              pop rbp
    85 0000006F EB9B                            jmp return
    86                                  
    87                                  PercentHandler:
    88 00000071 49FFC4                          inc r12
    89 00000074 48FFC6                          inc rsi
    90 00000077 4831C0                          xor rax, rax                                    ; arg must be > '%' and < 'x'
    91                                  
    92 0000007A 8A06                            mov al, [rsi]
    93                                  
    94 0000007C 3C25                            cmp al, '%'
    95 0000007E 750D                            jne .skip_percent
    96                                  
    97 00000080 E84D010000                      call CharCopy
    98 00000085 48FFC6                          inc rsi
    99 00000088 49FFCC                          dec r12
   100 0000008B EBBD                            jmp next_parsing
   101                                  
   102                                  .skip_percent:
   103 0000008D 488B04C5[160D0000]              mov rax, [jump_table + (rax - 'b')*8]
   104 00000095 FFE0                            jmp rax
   105                                  
   106                                  Error:
   107 00000097 B801000000                      mov rax, 0x01
   108 0000009C BF01000000                      mov rdi, 1
   109 000000A1 48BE-                           mov rsi, ErrorMessage
   109 000000A3 [0000000000000000] 
   110 000000AB BA0E000000                      mov rdx, ErrorMessageLen
   111 000000B0 0F05                            syscall
   112                                  
   113 000000B2 C60425[1E100000]00              mov byte [buf_position], 0
   114                                  
   115 000000BA B89A020000                      mov rax, 666                                    ; error code
   116 000000BF EB9D                            jmp exit_parsing
   117                                  
   118                                  Binary:
   119 000000C1 4C8B1C25[1E100000]              mov r11, [buf_position]
   120 000000C9 4A635CE508                      movsxd rbx, [rbp + 8 + r12*8]
   121 000000CE BF02000000                      mov rdi, 2
   122                                  
   123 000000D3 E84B010000                      call GlobalConverter
   124                                  
   125 000000D8 49FFC3                          inc r11
   126 000000DB 48FFC6                          inc rsi
   127 000000DE 4C891C25[1E100000]              mov [buf_position], r11
   128 000000E6 E95FFFFFFF                      jmp next_parsing
   129                                  
   130                                  Char:
   131 000000EB 4A6344E508                      movsxd rax, [rbp + 8 + r12*8]
   132                                  
   133 000000F0 E8DD000000                      call CharCopy
   134                                  
   135 000000F5 48FFC6                          inc rsi
   136 000000F8 E94DFFFFFF                      jmp next_parsing
   137                                  
   138                                  Decimal:
   139 000000FD 4C8B1C25[1E100000]              mov r11, [buf_position]
   140 00000105 4A6354E508                      movsxd rdx, dword [rbp + 8 + r12*8]             ; save my life... (int 32 bites)
   141                                  
   142 0000010A E840020000                      call ConvertDec
   143                                  
   144 0000010F 48FFC6                          inc rsi
   145 00000112 4C891C25[1E100000]              mov [buf_position], r11
   146 0000011A E92BFFFFFF                      jmp next_parsing
   147                                  
   148                                  Octal:
   149 0000011F 4C8B1C25[1E100000]              mov r11, [buf_position]
   150 00000127 428B5CE508                      mov ebx, [rbp + 8 + r12*8]
   151 0000012C BF08000000                      mov rdi, 8
   152                                  
   153 00000131 E8ED000000                      call GlobalConverter
   154                                  
   155 00000136 48FFC6                          inc rsi
   156 00000139 49FFC3                          inc r11
   157 0000013C 4C891C25[1E100000]              mov [buf_position], r11
   158 00000144 E901FFFFFF                      jmp next_parsing
   159                                  
   160                                  Hexademical:
   161 00000149 4C8B1C25[1E100000]              mov r11, [buf_position]
   162 00000151 428B5CE508                      mov ebx, [rbp + 8 + r12*8]
   163 00000156 BF10000000                      mov rdi, 16
   164                                  
   165 0000015B E8C3000000                      call GlobalConverter
   166                                  
   167 00000160 48FFC6                          inc rsi
   168 00000163 49FFC3                          inc r11
   169 00000166 4C891C25[1E100000]              mov [buf_position], r11
   170 0000016E E9D7FEFFFF                      jmp next_parsing
   171                                  
   172                                  String:
   173 00000173 4889F7                          mov rdi, rsi
   174 00000176 4A8B74E508                      mov rsi, [rbp + 8 + r12*8]
   175 0000017B 8A06                            mov al, [rsi]
   176 0000017D 3C00                            cmp al, 0
   177 0000017F 0F8412FFFFFF                    je Error
   178                                  
   179 00000185 EB00                            jmp StringCopy
   180                                  
   181                                  ;=============================================================================
   182                                  ; Copy one symbol to buffer
   183                                  ; Entry:        rsi = address
   184                                  ;               r11 = buf_position
   185                                  ; Exit:
   186                                  ; Destr: R11                                                               !!!
   187                                  ;=============================================================================
   188                                  StringCopy:
   189                                  
   190 00000187 E835020000                      call StrLen
   191                                  
   192 0000018C 4C89D8                          mov rax, r11
   193 0000018F 4801C8                          add rax, rcx
   194 00000192 483D00100000                    cmp rax, BUFFER_SIZE
   195 00000198 7E0D                            jle .continue
   196                                  
   197 0000019A E84E000000                      call FlushBuffer
   198 0000019F C60425[1E100000]00              mov byte [buf_position], 0
   199                                  
   200                                  .continue:
   201 000001A7 8A06                            mov al, [rsi]
   202 000001A9 418883[1E000000]                mov [buffer + r11], al
   203 000001B0 49FFC3                          inc r11
   204 000001B3 48FFC9                          dec rcx
   205 000001B6 48FFC6                          inc rsi
   206 000001B9 4883F900                        cmp rcx, 0
   207 000001BD 75E8                            jne .continue
   208                                  
   209 000001BF 4889FE                          mov rsi, rdi
   210 000001C2 48FFC6                          inc rsi
   211 000001C5 4C891C25[1E100000]              mov [buf_position], r11
   212 000001CD E978FEFFFF                      jmp next_parsing
   213                                  
   214                                  ;=============================================================================
   215                                  ; Copy one symbol to buffer
   216                                  ; Entry:        al - symbol
   217                                  ; Exit:
   218                                  ; Destr: R11                                                               !!!
   219                                  ;=============================================================================
   220                                  CharCopy:
   221                                  
   222 000001D2 4C8B1C25[1E100000]              mov r11, [buf_position]
   223 000001DA 418883[1E000000]                mov [buffer + r11], al
   224 000001E1 49FFC3                          inc r11
   225 000001E4 4C891C25[1E100000]              mov [buf_position], r11
   226                                  
   227 000001EC C3                              ret
   228                                  
   229                                  ;=============================================================================
   230                                  ; Func to Flush the Buffer
   231                                  ; Entry:
   232                                  ; Exit:
   233                                  ; Destr: RAX, RDI, RSI, RDX                                                !!!
   234                                  ;=============================================================================
   235                                  FlushBuffer:
   236                                  
   237 000001ED 48833C25[1E100000]-             cmp qword [buf_position], 0
   237 000001F5 00                 
   238 000001F6 742A                            je .exit
   239                                  
   240 000001F8 B801000000                      mov rax, 1
   241 000001FD BF01000000                      mov rdi, 1
   242 00000202 48BE-                           mov rsi, buffer
   242 00000204 [1E00000000000000] 
   243 0000020C 488B1425[1E100000]              mov rdx, [buf_position]
   244 00000214 0F05                            syscall
   245                                  
   246 00000216 48C70425[1E100000]-             mov qword [buf_position], 0
   246 0000021E 00000000           
   247                                  
   248                                  .exit:
   249 00000222 C3                              ret
   250                                  
   251                                  ; ############################################################################
   252                                  ; Enter:        rbx = 32 bit number
   253                                  ;               rdi = base
   254                                  ;               r11 = buf_position
   255                                  ;
   256                                  ; ============================================================================
   257                                  GlobalConverter:
   258                                  
   259 00000223 4154                            push r12
   260                                  
   261 00000225 4989FE                          mov r14, rdi                            ; base arg
   262 00000228 4D89DD                          mov r13, r11                            ; buf_position arg
   263                                  
   264                                  ;        cmp r14, 10
   265                                  ;        je .base_10
   266                                  
   267 0000022B B91F000000                      mov rcx, 31                             ; base 2 : count of symbols
   268 00000230 41BF01000000                    mov r15, 1                              ;          shift by 1 bit
   269 00000236 B801000000                      mov rax, 1                              ;          bit mask
   270                                  
   271 0000023B 4983FE08                        cmp r14, 8
   272 0000023F 7512                            jne .check_base_16
   273 00000241 B90A000000                      mov rcx, 10                             ; base 8
   274 00000246 41BF03000000                    mov r15, 3
   275 0000024C B807000000                      mov rax, 0x7
   276 00000251 EB16                            jmp .done
   277                                  
   278                                  .check_base_16:
   279 00000253 4983FE10                        cmp r14, 16
   280 00000257 7510                            jne .done
   281 00000259 B907000000                      mov rcx, 7
   282 0000025E 41BF04000000                    mov r15, 4
   283 00000264 B80F000000                      mov rax, 0xF
   284                                  
   285                                  .done:
   286 00000269 4989CC                          mov r12, rcx
   287 0000026C 4D01E5                          add r13, r12
   288 0000026F 4D89EB                          mov r11, r13
   289                                  
   290                                  .find_first:
   291 00000272 4889DA                          mov rdx, rbx
   292 00000275 48D3EA                          shr rdx, cl
   293 00000278 4883E201                        and rdx, 1
   294 0000027C 83FA00                          cmp edx, 0                                      ; find first 1 for leading zeros
   295 0000027F 750B                            jne .convert
   296 00000281 4C29F9                          sub rcx, r15
   297 00000284 4883F9FF                        cmp rcx, -1
   298 00000288 7E02                            jle .convert
   299 0000028A EBE6                            jmp .find_first
   300                                  
   301                                  .convert:
   302 0000028C 51                              push rcx
   303                                  
   304 0000028D 4889DA                          mov rdx, rbx
   305 00000290 4821C2                          and rdx, rax
   306                                  
   307 00000293 8A8A[0E000000]                  mov cl, [digits + rdx]                          ; ASCII
   308 00000299 41888D[1E000000]                mov [buffer + r13], cl
   309                                  
   310 000002A0 4488F9                          mov cl, r15b
   311 000002A3 48D3EB                          shr rbx, cl
   312 000002A6 49FFCD                          dec r13
   313                                  
   314 000002A9 59                              pop rcx
   315 000002AA 48FFC9                          dec rcx
   316                                  
   317 000002AD 7DDD                            jge .convert
   318 000002AF EB00                            jmp .exit
   319                                  
   320                                  .exit:
   321 000002B1 415C                            pop r12
   322 000002B3 C3                              ret
   323                                  
   324                                  ; ############################################################################
   325                                  
   326                                  
   327                                  
   328                                  ;=============================================================================
   329                                  ; Convert to Octal number
   330                                  ; Entry:        dl = number
   331                                  ;               r11 = buf_pos
   332                                  ; Exit:
   333                                  ; Destr: RDX, RAX, RCX                                                     !!!
   334                                  ;=============================================================================
   335                                  ConvertOct:
   336                                  
   337 000002B4 4889D3                          mov rbx, rdx
   338 000002B7 4D89DD                          mov r13, r11
   339 000002BA 4831C9                          xor rcx, rcx
   340                                  
   341                                  .positive:
   342 000002BD 4831D2                          xor rdx, rdx
   343 000002C0 4889D8                          mov rax, rbx
   344 000002C3 BB08000000                      mov rbx, 8
   345 000002C8 48F7F3                          div rbx                                         ; rax - quotient, rdx - remainder
   346                                  
   347 000002CB 4889C3                          mov rbx, rax
   348 000002CE 4831C0                          xor rax, rax
   349 000002D1 8A82[0E000000]                  mov al, [digits + rdx]                          ; ASCII
   350 000002D7 418885[1E000000]                mov [buffer + r13], al
   351 000002DE 48FFC1                          inc rcx
   352 000002E1 49FFC5                          inc r13
   353                                  
   354 000002E4 4883F90B                        cmp rcx, 11
   355 000002E8 740C                            je .skip
   356                                  
   357 000002EA 4883FB00                        cmp rbx, 0
   358 000002EE 7FCD                            jg .positive
   359                                  
   360 000002F0 4831C0                          xor rax, rax
   361 000002F3 4831DB                          xor rbx, rbx
   362                                  
   363                                  .skip:
   364 000002F6 4155                            push r13
   365                                  
   366                                  .turn_over:
   367 000002F8 4D39EB                          cmp r11, r13
   368 000002FB 7D24                            jge .exit
   369                                  
   370 000002FD 418A85[1D000000]                mov al, [buffer + r13 - 1]
   371 00000304 418A9B[1E000000]                mov bl, [buffer + r11]
   372 0000030B 41889D[1D000000]                mov [buffer + r13 - 1], bl
   373 00000312 418883[1E000000]                mov [buffer + r11], al
   374                                  
   375 00000319 49FFC3                          inc r11
   376 0000031C 49FFCD                          dec r13
   377 0000031F EBD7                            jmp .turn_over
   378                                  
   379                                  .exit:
   380 00000321 415B                            pop r11
   381                                  
   382 00000323 C3                              ret
   383                                  
   384                                  ;=============================================================================
   385                                  ; Convert to Binary number
   386                                  ; Entry:        dl = number
   387                                  ;               r11 = buf_pos
   388                                  ; Exit:
   389                                  ; Destr: RDX, RAX, RCX                                                     !!!
   390                                  ;=============================================================================
   391                                  ConvertBin:
   392                                  
   393 00000324 B91F000000                      mov rcx, 31                                     ; 31 bites (0th bit - sign)
   394                                  
   395 00000329 4883FA00                        cmp rdx, 0
   396 0000032D 7E00                            jng .convert
   397                                  
   398                                  ;.find_first:
   399                                  ;        mov rdx, rbx
   400                                  ;        shr rdx, cl
   401                                  ;        and rdx, 1
   402                                  ;        cmp rdx, 1                                      ; find first 1 for leading zeros
   403                                  ;        je .convert
   404                                  ;        dec rcx
   405                                  ;        cmp rcx, -1
   406                                  ;        je .convert
   407                                  ;        jmp .find_first
   408                                  
   409                                  .convert:
   410 0000032F 4889D0                          mov rax, rdx
   411 00000332 48D3E8                          shr rax, cl
   412 00000335 4883E001                        and rax, 1
   413 00000339 8A80[0E000000]                  mov al, [digits + rax]                          ; ASCII
   414 0000033F 418883[1E000000]                mov [buffer + r11], al
   415 00000346 49FFC3                          inc r11
   416 00000349 48FFC9                          dec rcx
   417 0000034C 79E1                            jns .convert                                    ; checks SF flag (rcx = -1 -> SF = 1)
   418                                  
   419 0000034E C3                              ret
   420                                  
   421                                  ;=============================================================================
   422                                  ; Convert Hex to good numbers
   423                                  ; Entry:        dl = number
   424                                  ;               r11 = buf_pos
   425                                  ; Exit:
   426                                  ; Destr: RBX, RAX, RCX, RDX                                                !!!
   427                                  ;=============================================================================
   428                                  ConvertDec:
   429                                  
   430 0000034F 4889D3                          mov rbx, rdx
   431                                  
   432 00000352 4D89DD                          mov r13, r11
   433 00000355 4883FB00                        cmp rbx, 0
   434 00000359 7D11                            jge .positive                                   ; >= 0
   435                                  
   436 0000035B 41C685[1E000000]2D              mov byte [buffer + r13], '-'
   437 00000363 49FFC5                          inc r13
   438 00000366 49FFC3                          inc r11
   439 00000369 48F7DB                          neg rbx
   440                                  
   441                                  .positive:
   442 0000036C 4831D2                          xor rdx, rdx
   443 0000036F 4889D8                          mov rax, rbx
   444 00000372 BB0A000000                      mov rbx, 10
   445 00000377 48F7F3                          div rbx                                         ; rax - quotient, rdx - remainder
   446                                  
   447 0000037A 4889C3                          mov rbx, rax
   448 0000037D 8A82[0E000000]                  mov al, [digits + rdx]                          ; ASCII
   449 00000383 418885[1E000000]                mov [buffer + r13], al
   450 0000038A 49FFC5                          inc r13
   451 0000038D 4883FB00                        cmp rbx, 0
   452 00000391 7FD9                            jg .positive                                    ; signed greater
   453                                  
   454 00000393 4155                            push r13
   455                                  
   456                                  .turn_over:
   457 00000395 4D39EB                          cmp r11, r13
   458 00000398 7D24                            jge .exit
   459                                  
   460 0000039A 418A85[1D000000]                mov al, [buffer + r13 - 1]
   461 000003A1 418A9B[1E000000]                mov bl, [buffer + r11]
   462 000003A8 41889D[1D000000]                mov [buffer + r13 - 1], bl
   463 000003AF 418883[1E000000]                mov [buffer + r11], al
   464                                  
   465 000003B6 49FFC3                          inc r11
   466 000003B9 49FFCD                          dec r13
   467 000003BC EBD7                            jmp .turn_over
   468                                  
   469                                  .exit:
   470 000003BE 415B                            pop r11
   471                                  
   472 000003C0 C3                              ret
   473                                  
   474                                  ;=============================================================================
   475                                  ; Count length of string
   476                                  ; Entry:        rsi = string offset
   477                                  ; Exit:         rcx = length of string
   478                                  ; Destr: AL                                                                !!!
   479                                  ;=============================================================================
   480                                  StrLen:
   481                                  
   482 000003C1 53                              push rbx
   483 000003C2 4889F3                          mov rbx, rsi
   484 000003C5 4831C9                          xor rcx, rcx
   485                                  .cycle:
   486 000003C8 8A03                            mov al, [rbx]
   487 000003CA 3C00                            cmp al, 0
   488 000003CC 7407                            je .match
   489                                  
   490 000003CE FEC1                            inc cl
   491 000003D0 48FFC3                          inc rbx
   492 000003D3 EBF3                            jmp .cycle
   493                                  
   494                                  .match:
   495 000003D5 5B                              pop rbx
   496                                  
   497 000003D6 C3                              ret
   498                                  
   499                                  
   500                                  
   501                                  section .data
   502                                  
   503                                  ASCII_NULL      equ  "0"
   504                                  ASCII_NINE      equ  "9"
   505                                  ASCII_A         equ  "A"
   506                                  ASCII_F         equ  "F"
   507                                  ASCII_SPACE     equ  " "
   508                                  ASCII_SL_N      equ  0Ah
   509                                  ASCII_SL_R      equ  0Dh
   510                                  
   511                                  BUFFER_SIZE     equ  4096                               ; Linux page memory size
   512                                  
   513 00000000 53796E746178206572-     ErrorMessage    db      "Syntax error!", 0xA
   513 00000009 726F72210A         
   514                                  ErrorMessageLen equ      $ - ErrorMessage
   515                                  
   516 0000000E 303132333435363738-     digits:         db      "0123456789ABCDEF"
   516 00000017 39414243444546     
   517 0000001E 00<rep 1000h>           buffer          times BUFFER_SIZE  db  0                ; BUFFER_SIZE times 0 byte
   518 0000101E 0000000000000000        buf_position:   dq      0                               ; 8 byte (to match the size of the registers)
   519                                  
   520                                  jump_table:
   521 00001026 [C100000000000000]                              dq Binary
   522 0000102E [EB00000000000000]                              dq Char
   523 00001036 [FD00000000000000]                              dq Decimal
   524 0000103E [9700000000000000]-      times ('o' - 'd' - 1)  dq Error
   524 0000103E <rep Ah>           
   525 0000108E [1F01000000000000]                              dq Octal
   526 00001096 [9700000000000000]-      times ('s' - 'o' - 1)  dq Error
   526 00001096 <rep 3h>           
   527 000010AE [7301000000000000]                              dq String
   528 000010B6 [9700000000000000]-      times ('x' - 's' - 1)  dq Error
   528 000010B6 <rep 4h>           
   529 000010D6 [4901000000000000]                              dq Hexademical
   530                                  
   531                                  
   532                                  
   533                                  
   534                                  
   535                                  ; NOTE: tramplin - call -> jump
   536                                  ; ded checks %c, %s, jmptbl
