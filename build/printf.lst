     1                                  
     2                                  ; |=================================================|
     3                                  ; |                                                 |
     4                                  ; |                MyPrintf FUNCTION                |
     5                                  ; |                                                 |
     6                                  ; |=================================================|
     7                                  
     8                                  section .text
     9                                  
    10                                  global MyPrintf
    11                                  
    12                                  MyPrintf:
    13                                  
    14 00000000 55                              push rbp
    15 00000001 4889E5                          mov rbp, rsp
    16 00000004 4883EC08                        sub rsp, 8                                      ; stack alignment on 16-byte boundary
    17                                  
    18 00000008 53                              push rbx                                        ; save
    19 00000009 4153                            push r11                                        ; save
    20                                  
    21 0000000B 4889FB                          mov rbx, rdi                                    ; save string address
    22                                  
    23 0000000E 4889DE                          mov rsi, rbx
    24 00000011 E808000000                      call StrLen
    25                                  
    26                                          ;call StringParcing
    27                                  
    28 00000016 4153                            push r11
    29 00000018 53                              push rbx
    30                                  
    31 00000019 4889EC                          mov rsp, rbp
    32 0000001C 5D                              pop rbp
    33                                  
    34 0000001D C3                              ret
    35                                  
    36                                  ;=============================================================================
    37                                  ;
    38                                  ; Entry:
    39                                  ; Exit:
    40                                  ; Destr:                                                                   !!!
    41                                  ;=============================================================================
    42                                  ;StringParcing:
    43                                  
    44                                  ;        mov r11, [buf_position]
    45                                  
    46                                  ;        mov rax, r11
    47                                  ;        add rax, rcx
    48                                  ;        cmp rax, BUFFER_SIZE
    49                                  
    50                                  
    51                                  ;=============================================================================
    52                                  ; Count length of string
    53                                  ; Entry:        rsi = string offset
    54                                  ; Exit:         rcx = length of string
    55                                  ; Destr: AL                                                                !!!
    56                                  ;=============================================================================
    57                                  StrLen:
    58                                  
    59 0000001E 53                              push rbx
    60 0000001F 4889F3                          mov rbx, rsi
    61 00000022 4831C9                          xor rcx, rcx
    62                                  .cycle:
    63 00000025 8A03                            mov al, [rbx]
    64 00000027 3C00                            cmp al, 0
    65 00000029 7407                            je .match
    66                                  
    67 0000002B FEC1                            inc cl
    68 0000002D 48FFC3                          inc rbx
    69 00000030 EBF3                            jmp .cycle
    70                                  
    71                                  .match:
    72 00000032 5B                              pop rbx
    73                                  
    74 00000033 C3                              ret
    75                                  
    76                                  section .data
    77                                  
    78                                          BUFFER_SIZE  equ  4096                          ; Linux page memory size
    79                                  
    80                                  buffer:
    81 00000000 00<rep 1000h>                   times BUFFER_SIZE  db  0                        ; BUFFER_SIZE times 0 byte
    82                                  
    83                                  buf_position:
    84 00001000 0000000000000000                dq  0                                           ; 8 byte (to match the size of the registers)
    85                                  
