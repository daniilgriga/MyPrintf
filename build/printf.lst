     1                                  
     2                                  ; |=================================================|
     3                                  ; | <---------------------------------------------> |
     4                                  ; | <------------> MyPrintf FUNCTION <------------> |
     5                                  ; | <---------------------------------------------> |
     6                                  ; |=================================================|
     7                                  
     8                                  section .text
     9                                  
    10                                  global MyPrintf
    11                                  
    12                                  MyPrintf:
    13                                  
    14 00000000 415F                            pop r15                                         ; return address
    15                                  
    16 00000002 4151                            push r9                                         ; 6th argument
    17 00000004 4150                            push r8                                         ; 5th
    18 00000006 51                              push rcx                                        ; 4th
    19 00000007 52                              push rdx                                        ; 3th
    20 00000008 56                              push rsi                                        ; 2th
    21 00000009 57                              push rdi                                        ; 1th
    22                                  
    23 0000000A E810000000                      call Parcing
    24 0000000F E8D5000000                      call FlushBuffer
    25                                  
    26 00000014 5F                              pop rdi
    27 00000015 5E                              pop rsi
    28 00000016 5A                              pop rdx
    29 00000017 59                              pop rcx
    30 00000018 4158                            pop r8
    31 0000001A 4159                            pop r9
    32                                  
    33 0000001C 4157                            push r15
    34                                  
    35 0000001E C3                              ret
    36                                  
    37                                  ;=============================================================================
    38                                  ; Parcing string func
    39                                  ; Entry:        all arguments in stack
    40                                  ; Exit:
    41                                  ; Destr:                                                                   !!!
    42                                  ;=============================================================================
    43                                  Parcing:
    44                                  
    45 0000001F 55                              push rbp
    46 00000020 4889E5                          mov rbp, rsp
    47 00000023 488B7510                        mov rsi, [rbp + 16]
    48                                  
    49 00000027 E8B2010000                      call StrLen
    50                                  
    51 0000002C 4C8B1C25[0A100000]              mov r11, [buf_position]
    52                                  
    53 00000034 4C89D8                          mov rax, r11
    54 00000037 4801C8                          add rax, rcx
    55 0000003A 483D00100000                    cmp rax, BUFFER_SIZE
    56 00000040 7E0B                            jle .continue
    57                                  
    58 00000042 E8A2000000                      call FlushBuffer
    59 00000047 41BB00000000                    mov r11, 0
    60                                  
    61                                  .continue:
    62                                  
    63 0000004D 4D31D2                          xor r10, r10
    64 00000050 4D31E4                          xor r12, r12
    65                                  
    66                                  next_parcing:
    67 00000053 8A06                            mov al, [rsi]
    68                                  
    69 00000055 3C00                            cmp al, 0
    70 00000057 740E                            je exit_parcing
    71                                  
    72 00000059 3C25                            cmp al, '%'
    73 0000005B 740F                            je PercentHandler
    74                                  
    75 0000005D E86C000000                      call CharCopy
    76 00000062 48FFC6                          inc rsi
    77 00000065 EBEC                            jmp next_parcing
    78                                  
    79                                  exit_parcing:
    80 00000067 4889EC                          mov rsp, rbp
    81 0000006A 5D                              pop rbp
    82                                  
    83 0000006B C3                              ret
    84                                  
    85                                  PercentHandler:
    86                                  
    87 0000006C 49FFC4                          inc r12
    88 0000006F 48FFC6                          inc rsi
    89 00000072 4831C0                          xor rax, rax
    90                                  
    91 00000075 8A06                            mov al, [rsi]
    92 00000077 488B04C5[020D0000]              mov rax, [jump_table + (rax - 'b')*8]
    93 0000007F FFE0                            jmp rax
    94                                  
    95                                  Binary:
    96 00000081 4C8B1C25[0A100000]              mov r11, [buf_position]
    97 00000089 4A6354E510                      movsxd rdx, [rbp + 16 + r12*8]
    98                                  
    99 0000008E E88C000000                      call ConvertBin
   100                                  
   101 00000093 48FFC6                          inc rsi
   102 00000096 4C891C25[0A100000]              mov [buf_position], r11
   103 0000009E EBB3                            jmp next_parcing
   104                                  
   105                                  Char:
   106 000000A0 4A6344E510                      movsxd rax, [rbp + 16 + r12*8]
   107                                  
   108 000000A5 E824000000                      call CharCopy
   109                                  
   110 000000AA 48FFC6                          inc rsi
   111 000000AD EBA4                            jmp next_parcing
   112                                  
   113                                  Decimal:
   114 000000AF 4C8B1C25[0A100000]              mov r11, [buf_position]
   115 000000B7 4A6354E510                      movsxd rdx, [rbp + 16 + r12*8]                  ; save my life... (int 32 bites)
   116                                  
   117 000000BC E8A3000000                      call ConvertHex
   118                                  
   119 000000C1 48FFC6                          inc rsi
   120 000000C4 4C891C25[0A100000]              mov [buf_position], r11
   121 000000CC EB85                            jmp next_parcing
   122                                  
   123                                  ;=============================================================================
   124                                  ; Copy one symbol to buffer
   125                                  ; Entry:        al - symbol
   126                                  ; Exit:
   127                                  ; Destr: R11                                                               !!!
   128                                  ;=============================================================================
   129                                  CharCopy:
   130                                  
   131 000000CE 4C8B1C25[0A100000]              mov r11, [buf_position]
   132 000000D6 418883[0A000000]                mov [buffer + r11], al
   133 000000DD 49FFC3                          inc r11
   134 000000E0 4C891C25[0A100000]              mov [buf_position], r11
   135                                  
   136 000000E8 C3                              ret
   137                                  
   138                                  ;=============================================================================
   139                                  ; Func to Flush the Buffer
   140                                  ; Entry:
   141                                  ; Exit:
   142                                  ; Destr: RAX, RDI, RSI, RDX                                                !!!
   143                                  ;=============================================================================
   144                                  FlushBuffer:
   145                                  
   146 000000E9 48833C25[0A100000]-             cmp qword [buf_position], 0
   146 000000F1 00                 
   147 000000F2 742A                            je .exit
   148                                  
   149 000000F4 B801000000                      mov rax, 1
   150 000000F9 BF01000000                      mov rdi, 1
   151 000000FE 48BE-                           mov rsi, buffer
   151 00000100 [0A00000000000000] 
   152 00000108 488B1425[0A100000]              mov rdx, [buf_position]
   153 00000110 0F05                            syscall
   154                                  
   155 00000112 48C70425[0A100000]-             mov qword [buf_position], 0
   155 0000011A 00000000           
   156                                  
   157                                  .exit:
   158 0000011E C3                              ret
   159                                  
   160                                  
   161                                  ;=============================================================================
   162                                  ; Convert to Binary number
   163                                  ; Entry:        dl = number
   164                                  ;               r11 = buf_pos
   165                                  ; Exit:
   166                                  ; Destr: RDX, RAX, RCX                                                     !!!
   167                                  ;=============================================================================
   168                                  ConvertBin:
   169                                  
   170 0000011F B91F000000                      mov rcx, 31                                     ; 31 bites (0th bit - sign)
   171                                  
   172 00000124 80FA00                          cmp dl, 0
   173 00000127 7E1B                            jng .convert
   174                                  
   175                                  .find_first:
   176 00000129 4889D0                          mov rax, rdx
   177 0000012C 48D3E8                          shr rax, cl
   178 0000012F 4883E001                        and rax, 1
   179 00000133 4883F801                        cmp rax, 1                                      ; find first 1 for leading zeros
   180 00000137 740B                            je .convert
   181 00000139 48FFC9                          dec rcx
   182 0000013C 4883F9FF                        cmp rcx, -1
   183 00000140 7402                            je .convert
   184 00000142 EBE5                            jmp .find_first
   185                                  
   186                                  .convert:
   187 00000144 4889D0                          mov rax, rdx
   188 00000147 48D3E8                          shr rax, cl
   189 0000014A 4883E001                        and rax, 1
   190 0000014E 8A80[00000000]                  mov al, [digits + rax]                          ; ASCII
   191 00000154 418883[0A000000]                mov [buffer + r11], al
   192 0000015B 49FFC3                          inc r11
   193 0000015E 48FFC9                          dec rcx
   194 00000161 79E1                            jns .convert                                    ; checks SF flag (rcx = -1 -> SF = 1)
   195                                  
   196 00000163 C3                              ret
   197                                  
   198                                  ;=============================================================================
   199                                  ; Convert Hex to good numbers
   200                                  ; Entry:        dl = number
   201                                  ;               r11 = buf_pos
   202                                  ; Exit:
   203                                  ; Destr: RBX, RAX, RCX, RDX                                                !!!
   204                                  ;=============================================================================
   205                                  ConvertHex:
   206                                  
   207 00000164 4889D3                          mov rbx, rdx
   208                                  
   209 00000167 4D89DD                          mov r13, r11
   210 0000016A 80FA00                          cmp dl, 0
   211 0000016D 7D11                            jge .positive                                   ; >= 0
   212                                  
   213 0000016F 41C685[0A000000]2D              mov byte [buffer + r13], '-'
   214 00000177 49FFC5                          inc r13
   215 0000017A 49FFC3                          inc r11
   216 0000017D 48F7DB                          neg rbx
   217                                  
   218                                  .positive:
   219 00000180 4831D2                          xor rdx, rdx
   220 00000183 4889D8                          mov rax, rbx
   221 00000186 BB0A000000                      mov rbx, 10
   222 0000018B 48F7F3                          div rbx                                         ; rax - quotient, rdx - remainder
   223                                  
   224 0000018E 4889C3                          mov rbx, rax
   225 00000191 4831C0                          xor rax, rax
   226 00000194 8A82[00000000]                  mov al, [digits + rdx]                          ; ASCII
   227 0000019A 418885[0A000000]                mov [buffer + r13], al
   228 000001A1 49FFC5                          inc r13
   229 000001A4 4883FB00                        cmp rbx, 0
   230 000001A8 7FD6                            jg .positive                                    ; signed greater
   231                                  
   232 000001AA 4831C0                          xor rax, rax
   233 000001AD 4831DB                          xor rbx, rbx
   234                                  
   235 000001B0 4155                            push r13
   236                                  
   237                                  .turn_over:
   238 000001B2 4D39EB                          cmp r11, r13
   239 000001B5 7D24                            jge .exit
   240                                  
   241 000001B7 418A85[09000000]                mov al, [buffer + r13 - 1]
   242 000001BE 418A9B[0A000000]                mov bl, [buffer + r11]
   243 000001C5 41889D[09000000]                mov [buffer + r13 - 1], bl
   244 000001CC 418883[0A000000]                mov [buffer + r11], al
   245                                  
   246 000001D3 49FFC3                          inc r11
   247 000001D6 49FFCD                          dec r13
   248 000001D9 EBD7                            jmp .turn_over
   249                                  
   250                                  .exit:
   251 000001DB 415B                            pop r11
   252                                  
   253 000001DD C3                              ret
   254                                  
   255                                  ;=============================================================================
   256                                  ; Count length of string
   257                                  ; Entry:        rsi = string offset
   258                                  ; Exit:         rcx = length of string
   259                                  ; Destr: AL                                                                !!!
   260                                  ;=============================================================================
   261                                  StrLen:
   262                                  
   263 000001DE 53                              push rbx
   264 000001DF 4889F3                          mov rbx, rsi
   265 000001E2 4831C9                          xor rcx, rcx
   266                                  .cycle:
   267 000001E5 8A03                            mov al, [rbx]
   268 000001E7 3C00                            cmp al, 0
   269 000001E9 7407                            je .match
   270                                  
   271 000001EB FEC1                            inc cl
   272 000001ED 48FFC3                          inc rbx
   273 000001F0 EBF3                            jmp .cycle
   274                                  
   275                                  .match:
   276 000001F2 5B                              pop rbx
   277                                  
   278 000001F3 C3                              ret
   279                                  
   280                                  
   281                                  
   282                                  section .data
   283                                  
   284                                  ASCII_NULL      equ  "0"
   285                                  ASCII_NINE      equ  "9"
   286                                  ASCII_A         equ  "A"
   287                                  ASCII_F         equ  "F"
   288                                  ASCII_SPACE     equ  " "
   289                                  ASCII_SL_N      equ  0Ah
   290                                  ASCII_SL_R      equ  0Dh
   291                                  
   292                                  BUFFER_SIZE     equ  4096                               ; Linux page memory size
   293                                  
   294 00000000 303132333435363738-     digits          db "0123456789"
   294 00000009 39                 
   295                                  
   296                                  buffer:
   297 0000000A 00<rep 1000h>                   times BUFFER_SIZE  db  0                        ; BUFFER_SIZE times 0 byte
   298                                  
   299                                  buf_position:
   300 0000100A 0000000000000000                dq  0                                           ; 8 byte (to match the size of the registers)
   301                                  
   302                                  jump_table:
   303 00001012 [8100000000000000]                               dq Binary
   304 0000101A [A000000000000000]                               dq Char
   305 00001022 [AF00000000000000]                               dq Decimal
   306                                  ;  times ('o' - 'd' - 1) dq Error
   307                                  ;                        dq Octal
   308                                  ;  times ('s' - 'o' - 1) dq Error
   309                                  ;                        dq String
   310                                  ;  times ('x' - 's' - 1) dq Error
   311                                  ;                        dq Hexademical
