     1                                  
     2                                  ; |=================================================|
     3                                  ; |                                                 |
     4                                  ; |                MyPrintf FUNCTION                |
     5                                  ; |                                                 |
     6                                  ; |=================================================|
     7                                  
     8                                  section .text
     9                                  
    10                                  global MyPrintf
    11                                  
    12                                  MyPrintf:
    13                                  
    14 00000000 55                              push rbp
    15 00000001 4889E5                          mov rbp, rsp
    16 00000004 4883EC08                        sub rsp, 8                                      ; stack alignment on 16-byte boundary
    17                                  
    18 00000008 53                              push rbx                                        ; save
    19 00000009 4153                            push r11                                        ; save
    20                                  
    21                                          ;push r9                                        ; 6th argument
    22                                          ;push r8                                        ; 5th
    23                                          ;push rcx                                       ; 4th
    24                                          ;push rdx                                       ; 3th
    25 0000000B 56                              push rsi                                        ; 2th
    26 0000000C 57                              push rdi                                        ; 1th
    27                                  
    28                                          ;mov rbx, rdi                                    ; save string address
    29                                          ;mov rsi, rbx
    30                                  
    31                                  
    32 0000000D E80F000000                      call Parcing
    33 00000012 E8A5000000                      call FlushBuffer
    34                                  
    35                                  
    36 00000017 5F                              pop rdi
    37 00000018 5E                              pop rsi
    38                                          ;pop rdx
    39                                          ;pop rcx
    40                                          ;pop r8
    41                                          ;pop r9
    42                                  
    43 00000019 415B                            pop r11
    44 0000001B 5B                              pop rbx
    45                                  
    46 0000001C 4889EC                          mov rsp, rbp
    47 0000001F 5D                              pop rbp
    48                                  
    49 00000020 C3                              ret
    50                                  
    51                                  
    52                                  ;=============================================================================
    53                                  ; Parcing string func
    54                                  ; Entry:
    55                                  ; Exit:
    56                                  ; Destr:                                                                   !!!
    57                                  ;=============================================================================
    58                                  Parcing:
    59                                  
    60 00000021 55                              push rbp
    61 00000022 4889E5                          mov rbp, rsp
    62 00000025 488B7510                        mov rsi, [rbp + 16]
    63                                  
    64 00000029 E8C4000000                      call StrLen
    65                                  
    66 0000002E 4C8B1C25[00100000]              mov r11, [buf_position]
    67                                  
    68 00000036 4C89D8                          mov rax, r11
    69 00000039 4801C8                          add rax, rcx
    70 0000003C 483D00100000                    cmp rax, BUFFER_SIZE
    71 00000042 7E0B                            jle .continue
    72                                  
    73 00000044 E873000000                      call FlushBuffer
    74 00000049 41BB00000000                    mov r11, 0
    75                                  
    76                                  .continue:
    77                                  
    78 0000004F 4D31D2                          xor r10, r10
    79 00000052 4D31E4                          xor r12, r12
    80                                  
    81                                  .next:
    82 00000055 8A06                            mov al, [rsi]
    83                                  
    84 00000057 3C00                            cmp al, 0
    85 00000059 740E                            je exit_parcing
    86                                  
    87 0000005B 3C25                            cmp al, '%'
    88 0000005D 740F                            je PercentHandler
    89                                  
    90 0000005F E83D000000                      call CharCopy
    91 00000064 48FFC6                          inc rsi
    92 00000067 EBEC                            jmp .next
    93                                  
    94                                  exit_parcing:
    95 00000069 4889EC                          mov rsp, rbp
    96 0000006C 5D                              pop rbp
    97                                  
    98 0000006D C3                              ret
    99                                  
   100                                  PercentHandler:
   101                                  
   102 0000006E 49FFC4                          inc r12
   103 00000071 48FFC6                          inc rsi
   104 00000074 4831C0                          xor rax, rax
   105                                  
   106 00000077 8A06                            mov al, [rsi]
   107 00000079 3C64                            cmp al, 'd'
   108 0000007B 7400                            je Decimal
   109                                  
   110                                  Decimal:
   111 0000007D 4C8B1C25[00100000]              mov r11, [buf_position]
   112 00000085 428A54E510                      mov dl, [rbp + 16 + r12*8]
   113 0000008A 418893[00000000]                mov [buffer + r11], dl
   114 00000091 66FFC6                          inc si
   115 00000094 49FFC3                          inc r11
   116 00000097 4C891C25[00100000]              mov [buf_position], r11
   117 0000009F EBC8                            jmp exit_parcing
   118                                  
   119                                  
   120                                  ;=============================================================================
   121                                  ; Copy one symbol to buffer
   122                                  ; Entry:        al - symbol
   123                                  ; Exit:
   124                                  ; Destr:                                                                   !!!
   125                                  ;=============================================================================
   126                                  CharCopy:
   127                                  
   128 000000A1 4C8B1C25[00100000]              mov r11, [buf_position]
   129 000000A9 418883[00000000]                mov [buffer + r11], al
   130 000000B0 49FFC3                          inc r11
   131 000000B3 4C891C25[00100000]              mov [buf_position], r11
   132                                  
   133 000000BB C3                              ret
   134                                  
   135                                  ;=============================================================================
   136                                  ;
   137                                  ; Entry:
   138                                  ; Exit:
   139                                  ; Destr:                                                                   !!!
   140                                  ;=============================================================================
   141                                  FlushBuffer:
   142                                  
   143 000000BC 48833C25[00100000]-             cmp qword [buf_position], 0
   143 000000C4 00                 
   144 000000C5 742A                            je .exit
   145                                  
   146 000000C7 B801000000                      mov rax, 1
   147 000000CC BF01000000                      mov rdi, 1
   148 000000D1 48BE-                           mov rsi, buffer
   148 000000D3 [0000000000000000] 
   149 000000DB 488B1425[00100000]              mov rdx, [buf_position]
   150 000000E3 0F05                            syscall
   151                                  
   152 000000E5 48C70425[00100000]-             mov qword [buf_position], 0
   152 000000ED 00000000           
   153                                  
   154                                  .exit:
   155 000000F1 C3                              ret
   156                                  
   157                                  ;=============================================================================
   158                                  ; Count length of string
   159                                  ; Entry:        rsi = string offset
   160                                  ; Exit:         rcx = length of string
   161                                  ; Destr: AL                                                                !!!
   162                                  ;=============================================================================
   163                                  StrLen:
   164                                  
   165 000000F2 53                              push rbx
   166 000000F3 4889F3                          mov rbx, rsi
   167 000000F6 4831C9                          xor rcx, rcx
   168                                  .cycle:
   169 000000F9 8A03                            mov al, [rbx]
   170 000000FB 3C00                            cmp al, 0
   171 000000FD 7407                            je .match
   172                                  
   173 000000FF FEC1                            inc cl
   174 00000101 48FFC3                          inc rbx
   175 00000104 EBF3                            jmp .cycle
   176                                  
   177                                  .match:
   178 00000106 5B                              pop rbx
   179                                  
   180 00000107 C3                              ret
   181                                  
   182                                  section .data
   183                                  
   184                                          BUFFER_SIZE  equ  4096                          ; Linux page memory size
   185                                  
   186                                  buffer:
   187 00000000 00<rep 1000h>                   times BUFFER_SIZE  db  0                        ; BUFFER_SIZE times 0 byte
   188                                  
   189                                  buf_position:
   190 00001000 0000000000000000                dq  0                                           ; 8 byte (to match the size of the registers)
   191                                  
