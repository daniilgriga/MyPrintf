     1                                  
     2                                  ; |=================================================|
     3                                  ; | <---------------------------------------------> |
     4                                  ; | <------------> MyPrintf FUNCTION <------------> |
     5                                  ; | <---------------------------------------------> |
     6                                  ; |=================================================|
     7                                  
     8                                  %include "macros.inc"
     1                              <1> %macro pushs 1-*
     2                              <1>     %rep %0
     3                              <1>         push %1
     4                              <1>         %rotate 1
     5                              <1>     %endrep
     6                              <1> %endmacro
     7                              <1> 
     8                              <1> %macro pops 1-*
     9                              <1>     %rep %0
    10                              <1>         pop %1
    11                              <1>         %rotate 1
    12                              <1>     %endrep
    13                              <1> %endmacro
    14                              <1> 
    15                              <1> %macro CharCopy 0
    16                              <1>         cmp r11, BUFFER_SIZE
    17                              <1>         jne .skip
    18                              <1>         mov qword [buf_position], r11
    19                              <1>         call FlushBuffer
    20                              <1> 
    21                              <1> .skip:
    22                              <1>         mov r11, [buf_position]
    23                              <1>         mov [buffer + r11], al
    24                              <1>         inc r11
    25                              <1>         mov [buf_position], r11
    26                              <1> %endmacro
     9                                  section .text
    10                                  
    11                                  global MyPrintf
    12                                  
    13                                  MyPrintf:
    14                                  
    15 00000000 415A                            pop   r10                                       ; return address
    16                                          pushs r9, r8, rcx, rdx, rsi, rdi
     2                              <1>  %rep %0
     3                              <1>  push %1
     4                              <1>  %rotate 1
     5                              <1>  %endrep
     3 00000002 4151                <2>  push %1
     4                              <2>  %rotate 1
     3 00000004 4150                <2>  push %1
     4                              <2>  %rotate 1
     3 00000006 51                  <2>  push %1
     4                              <2>  %rotate 1
     3 00000007 52                  <2>  push %1
     4                              <2>  %rotate 1
     3 00000008 56                  <2>  push %1
     4                              <2>  %rotate 1
     3 00000009 57                  <2>  push %1
     4                              <2>  %rotate 1
    17 0000000A 4153                            push  r11
    18                                  
    19 0000000C EB0D                            jmp Parsing
    20                                  
    21                                  return:
    22 0000000E 415B                            pop  r11
    23                                          pops rdi, rsi, rdx, rcx, r8, r9
     9                              <1>  %rep %0
    10                              <1>  pop %1
    11                              <1>  %rotate 1
    12                              <1>  %endrep
    10 00000010 5F                  <2>  pop %1
    11                              <2>  %rotate 1
    10 00000011 5E                  <2>  pop %1
    11                              <2>  %rotate 1
    10 00000012 5A                  <2>  pop %1
    11                              <2>  %rotate 1
    10 00000013 59                  <2>  pop %1
    11                              <2>  %rotate 1
    10 00000014 4158                <2>  pop %1
    11                              <2>  %rotate 1
    10 00000016 4159                <2>  pop %1
    11                              <2>  %rotate 1
    24 00000018 4152                            push r10
    25                                  
    26 0000001A C3                              ret
    27                                  
    28                                  ;=============================================================================
    29                                  ; Parsing string func
    30                                  ; Entry:        all arguments in stack
    31                                  ; Exit:
    32                                  ; Destr: all                                                               !!!
    33                                  ;=============================================================================
    34                                  Parsing:
    35                                  
    36 0000001B 55                              push rbp
    37 0000001C 4889E5                          mov rbp, rsp
    38 0000001F 488B7510                        mov rsi, [rbp + 16]
    39                                  
    40 00000023 4D31E4                          xor r12, r12
    41                                  
    42                                  next_parsing:
    43 00000026 8A06                            mov al, [rsi]
    44                                  
    45 00000028 3C00                            cmp al, 0
    46 0000002A 7436                            je exit_parsing
    47                                  
    48 0000002C 3C25                            cmp al, '%'
    49 0000002E 7445                            je PercentHandler
    50                                  
    51                                          CharCopy
    16 00000030 4983FB66            <1>  cmp r11, BUFFER_SIZE
    17 00000034 750D                <1>  jne .skip
    18 00000036 4C891C25[84000000]  <1>  mov qword [buf_position], r11
    19 0000003E E8E0010000          <1>  call FlushBuffer
    20                              <1> 
    21                              <1> .skip:
    22 00000043 4C8B1C25[84000000]  <1>  mov r11, [buf_position]
    23 0000004B 418883[1E000000]    <1>  mov [buffer + r11], al
    24 00000052 49FFC3              <1>  inc r11
    25 00000055 4C891C25[84000000]  <1>  mov [buf_position], r11
    52 0000005D 48FFC6                          inc rsi
    53 00000060 EBC4                            jmp next_parsing
    54                                  
    55                                  exit_parsing:
    56 00000062 483D9A020000                    cmp rax, 666                                    ; if error code
    57 00000068 7405                            je .skip_flush
    58 0000006A E8B4010000                      call FlushBuffer
    59                                  
    60                                  .skip_flush:
    61 0000006F 4889EC                          mov rsp, rbp
    62 00000072 5D                              pop rbp
    63 00000073 EB99                            jmp return
    64                                  
    65                                  PercentHandler:
    66 00000075 49FFC4                          inc r12
    67 00000078 48FFC6                          inc rsi
    68 0000007B 4831C0                          xor rax, rax
    69                                  
    70 0000007E 8A06                            mov al, [rsi]
    71                                  
    72 00000080 3C25                            cmp al, '%'
    73 00000082 7538                            jne .skip_percent
    74                                  
    75                                          CharCopy
    16 00000084 4983FB66            <1>  cmp r11, BUFFER_SIZE
    17 00000088 750D                <1>  jne .skip
    18 0000008A 4C891C25[84000000]  <1>  mov qword [buf_position], r11
    19 00000092 E88C010000          <1>  call FlushBuffer
    20                              <1> 
    21                              <1> .skip:
    22 00000097 4C8B1C25[84000000]  <1>  mov r11, [buf_position]
    23 0000009F 418883[1E000000]    <1>  mov [buffer + r11], al
    24 000000A6 49FFC3              <1>  inc r11
    25 000000A9 4C891C25[84000000]  <1>  mov [buf_position], r11
    76 000000B1 48FFC6                          inc rsi
    77 000000B4 49FFCC                          dec r12
    78 000000B7 E96AFFFFFF                      jmp next_parsing
    79                                  
    80                                  .skip_percent:
    81 000000BC 3C62                            cmp al, 'b'
    82 000000BE 720E                            jb Error
    83                                  
    84 000000C0 3C78                            cmp al, 'x'
    85 000000C2 770A                            ja Error
    86                                  
    87 000000C4 488B04C5[7CFDFFFF]              mov rax, [jump_table + (rax - 'b')*8]
    88 000000CC FFE0                            jmp rax
    89                                  
    90                                  Error:
    91 000000CE B801000000                      mov rax, 0x01
    92 000000D3 BF01000000                      mov rdi, 1
    93 000000D8 48BE-                           mov rsi, ErrorMessage
    93 000000DA [0000000000000000] 
    94 000000E2 BA0E000000                      mov rdx, ErrorMessageLen
    95 000000E7 0F05                            syscall
    96                                  
    97 000000E9 C60425[84000000]00              mov byte [buf_position], 0
    98                                  
    99 000000F1 B89A020000                      mov rax, 666                                    ; error code
   100 000000F6 E967FFFFFF                      jmp exit_parsing
   101                                  
   102                                  Binary:
   103 000000FB 4C8B1C25[84000000]              mov r11, [buf_position]
   104 00000103 4A635CE510                      movsxd rbx, [rbp + 16 + r12*8]
   105 00000108 BF02000000                      mov rdi, 2
   106                                  
   107 0000010D E855010000                      call Converter
   108                                  
   109 00000112 48FFC6                          inc rsi
   110 00000115 4C891C25[84000000]              mov [buf_position], r11
   111 0000011D E904FFFFFF                      jmp next_parsing
   112                                  
   113                                  Char:
   114 00000122 4A6344E510                      movsxd rax, [rbp + 16 + r12*8]
   115                                  
   116                                          CharCopy
    16 00000127 4983FB66            <1>  cmp r11, BUFFER_SIZE
    17 0000012B 750D                <1>  jne .skip
    18 0000012D 4C891C25[84000000]  <1>  mov qword [buf_position], r11
    19 00000135 E8E9000000          <1>  call FlushBuffer
    20                              <1> 
    21                              <1> .skip:
    22 0000013A 4C8B1C25[84000000]  <1>  mov r11, [buf_position]
    23 00000142 418883[1E000000]    <1>  mov [buffer + r11], al
    24 00000149 49FFC3              <1>  inc r11
    25 0000014C 4C891C25[84000000]  <1>  mov [buf_position], r11
   117                                  
   118 00000154 48FFC6                          inc rsi
   119 00000157 E9CAFEFFFF                      jmp next_parsing
   120                                  
   121                                  Decimal:
   122 0000015C 4C8B1C25[84000000]              mov r11, [buf_position]
   123 00000164 4A6354E510                      movsxd rdx, dword [rbp + 16 + r12*8]            ; save my life... (int 32 bites)
   124                                  
   125 00000169 E89C010000                      call ConvertDec
   126                                  
   127 0000016E 48FFC6                          inc rsi
   128 00000171 4C891C25[84000000]              mov [buf_position], r11
   129 00000179 E9A8FEFFFF                      jmp next_parsing
   130                                  
   131                                  Octal:
   132 0000017E 4C8B1C25[84000000]              mov r11, [buf_position]
   133 00000186 428B5CE510                      mov ebx, [rbp + 16 + r12*8]
   134 0000018B BF08000000                      mov rdi, 8
   135                                  
   136 00000190 E8D2000000                      call Converter
   137                                  
   138 00000195 48FFC6                          inc rsi
   139 00000198 4C891C25[84000000]              mov [buf_position], r11
   140 000001A0 E981FEFFFF                      jmp next_parsing
   141                                  
   142                                  Hexademical:
   143 000001A5 4C8B1C25[84000000]              mov r11, [buf_position]
   144 000001AD 428B5CE510                      mov ebx, [rbp + 16 + r12*8]
   145 000001B2 BF10000000                      mov rdi, 16
   146                                  
   147 000001B7 E8AB000000                      call Converter
   148                                  
   149 000001BC 48FFC6                          inc rsi
   150 000001BF 4C891C25[84000000]              mov [buf_position], r11
   151 000001C7 E95AFEFFFF                      jmp next_parsing
   152                                  
   153                                  String:
   154 000001CC 4889F7                          mov rdi, rsi
   155 000001CF 4A8B74E510                      mov rsi, [rbp + 16 + r12*8]
   156 000001D4 8A06                            mov al, [rsi]
   157 000001D6 3C00                            cmp al, 0
   158 000001D8 0F84F0FEFFFF                    je Error
   159                                  
   160 000001DE E805000000                      call StringCopy
   161 000001E3 E93EFEFFFF                      jmp next_parsing
   162                                  
   163                                  ;=============================================================================
   164                                  ; Copy string to buffer
   165                                  ; Entry:        rsi = address
   166                                  ;               r11 = buf_position
   167                                  ; Exit:
   168                                  ; Destr: R11                                                               !!!
   169                                  ;=============================================================================
   170                                  StringCopy:
   171                                  
   172                                  .copy:
   173 000001E8 4983FB66                        cmp r11, BUFFER_SIZE
   174 000001EC 7510                            jne .skip
   175 000001EE 4C891C25[84000000]              mov qword [buf_position], r11
   176 000001F6 E828000000                      call FlushBuffer
   177 000001FB 4D31DB                          xor r11, r11
   178                                  
   179                                  .skip:
   180 000001FE 8A06                            mov al, [rsi]
   181 00000200 418883[1E000000]                mov [buffer + r11], al
   182                                  
   183 00000207 49FFC3                          inc r11
   184 0000020A 48FFC9                          dec rcx
   185 0000020D 48FFC6                          inc rsi
   186 00000210 3C00                            cmp al, 0
   187 00000212 75D4                            jne .copy
   188                                  
   189 00000214 4889FE                          mov rsi, rdi
   190 00000217 48FFC6                          inc rsi
   191 0000021A 4C891C25[84000000]              mov [buf_position], r11
   192 00000222 C3                              ret
   193                                  
   194                                  ;=============================================================================
   195                                  ; Func to Flush the Buffer
   196                                  ; Entry:
   197                                  ; Exit:
   198                                  ; Destr: RAX, RDI, RSI, RDX                                                !!!
   199                                  ;=============================================================================
   200                                  FlushBuffer:
   201                                  
   202 00000223 48833C25[84000000]-             cmp qword [buf_position], 0
   202 0000022B 00                 
   203 0000022C 7438                            je .exit
   204                                  
   205                                          pushs r11, rcx, rax, rdi, rsi, rdx
     2                              <1>  %rep %0
     3                              <1>  push %1
     4                              <1>  %rotate 1
     5                              <1>  %endrep
     3 0000022E 4153                <2>  push %1
     4                              <2>  %rotate 1
     3 00000230 51                  <2>  push %1
     4                              <2>  %rotate 1
     3 00000231 50                  <2>  push %1
     4                              <2>  %rotate 1
     3 00000232 57                  <2>  push %1
     4                              <2>  %rotate 1
     3 00000233 56                  <2>  push %1
     4                              <2>  %rotate 1
     3 00000234 52                  <2>  push %1
     4                              <2>  %rotate 1
   206                                  
   207 00000235 B801000000                      mov rax, 1
   208 0000023A BF01000000                      mov rdi, 1
   209 0000023F 48BE-                           mov rsi, buffer
   209 00000241 [1E00000000000000] 
   210 00000249 488B1425[84000000]              mov rdx, [buf_position]
   211 00000251 0F05                            syscall
   212                                  
   213 00000253 48C70425[84000000]-             mov qword [buf_position], 0
   213 0000025B 00000000           
   214                                  
   215                                          pops rdx, rsi, rdi, rax, rcx, r11
     9                              <1>  %rep %0
    10                              <1>  pop %1
    11                              <1>  %rotate 1
    12                              <1>  %endrep
    10 0000025F 5A                  <2>  pop %1
    11                              <2>  %rotate 1
    10 00000260 5E                  <2>  pop %1
    11                              <2>  %rotate 1
    10 00000261 5F                  <2>  pop %1
    11                              <2>  %rotate 1
    10 00000262 58                  <2>  pop %1
    11                              <2>  %rotate 1
    10 00000263 59                  <2>  pop %1
    11                              <2>  %rotate 1
    10 00000264 415B                <2>  pop %1
    11                              <2>  %rotate 1
   216                                  
   217                                  .exit:
   218 00000266 C3                              ret
   219                                  
   220                                  ;=============================================================================          ;|-------|---------------------------------------------|
   221                                  ; Converter to Binary, Octal and Hexidemical                                            ;|  rax  |                 bit mask                    |
   222                                  ; Enter:        rbx = 32 bit number                                                     ;|-------|---------------------------------------------|
   223                                  ;               rdi = base                                                              ;|  r15  |        number of bits for one symbol        |
   224                                  ;               r11 = buf_position                                                      ;|-------|---------------------------------------------|
   225                                  ; Destr: RAX, RBX, RDX, R8, R11, R14, R15                                  !!!          ;|  r14  |                   radix                     |
   226                                  ;=============================================================================          ;|-------|---------------------------------------------|
   227                                  Converter:                                                                              ;|  r11  |              buffer position                |
   228 00000267 4154                            push r12                                                                        ;|-------|---------------------------------------------|
   229 00000269 4989FE                          mov r14, rdi                                                                    ;|  r8   |             count of symbols                |
   230 0000026C B920000000                      mov rcx, 32                                                                     ;|-------|---------------------------------------------|
   231 00000271 41B820000000                    mov r8, 32
   232 00000277 41BF01000000                    mov r15, 1
   233 0000027D B801000000                      mov rax, 1
   234                                  ; // FIXME no ifs
   235 00000282 4983FE10                        cmp r14, 16
   236 00000286 7513                            jne .check_base_8
   237 00000288 41B808000000                    mov r8, 8
   238 0000028E 41BF04000000                    mov r15, 4
   239 00000294 B80F000000                      mov rax, 0xF
   240 00000299 EB1B                            jmp .find_first
   241                                  
   242                                  .check_base_8:
   243 0000029B 4983FE08                        cmp r14, 8
   244 0000029F 7515                            jne .find_first
   245 000002A1 41B80B000000                    mov r8, 11
   246 000002A7 41BF03000000                    mov r15, 3
   247 000002AD B807000000                      mov rax, 0x7
   248 000002B2 4883C101                        add rcx, 1
   249                                  
   250                                  .find_first:
   251 000002B6 4C29F9                          sub rcx, r15
   252 000002B9 4889DA                          mov rdx, rbx
   253 000002BC 48D3EA                          shr rdx, cl
   254 000002BF 4821C2                          and rdx, rax
   255 000002C2 83FA00                          cmp edx, 0                                      ; find first not zero for leading zeros
   256 000002C5 7508                            jne .convert
   257 000002C7 4883F9FF                        cmp rcx, -1
   258 000002CB 7E02                            jle .convert
   259 000002CD EBE7                            jmp .find_first
   260                                  
   261                                  .convert:
   262                                  
   263 000002CF 4983FB66                        cmp r11, BUFFER_SIZE
   264 000002D3 7510                            jne .asdf
   265 000002D5 4C891C25[84000000]              mov qword [buf_position], r11
   266 000002DD E841FFFFFF                      call FlushBuffer
   267 000002E2 4D31DB                          xor r11, r11
   268                                  
   269                                  .asdf:
   270 000002E5 51                              push rcx
   271 000002E6 4889DA                          mov rdx, rbx
   272 000002E9 48D3EA                          shr rdx, cl
   273 000002EC 4821C2                          and rdx, rax
   274                                  
   275 000002EF 8A8A[0E000000]                  mov cl, [digits + rdx]                          ; print in buffer
   276 000002F5 41888B[1E000000]                mov [buffer + r11], cl
   277                                  
   278 000002FC 49FFC3                          inc r11
   279 000002FF 59                              pop rcx
   280 00000300 4C29F9                          sub rcx, r15
   281                                  
   282 00000303 7DCA                            jge .convert
   283 00000305 EB00                            jmp .exit
   284                                  
   285                                  .exit:
   286 00000307 415C                            pop r12
   287 00000309 C3                              ret
   288                                  
   289                                  ;=============================================================================
   290                                  ; Converter to Decimal
   291                                  ; Entry:        dl = number
   292                                  ;               r11 = buf_pos
   293                                  ; Exit:
   294                                  ; Destr: RBX, RAX, RCX, RDX                                                !!!
   295                                  ;=============================================================================
   296                                  ConvertDec:
   297                                  
   298 0000030A 4889D3                          mov rbx, rdx
   299                                  
   300 0000030D 4D89DD                          mov r13, r11
   301 00000310 4883FB00                        cmp rbx, 0
   302 00000314 7D11                            jge .positive                                   ; >= 0
   303                                  
   304 00000316 41C685[1E000000]2D              mov byte [buffer + r13], '-'
   305 0000031E 49FFC5                          inc r13
   306 00000321 49FFC3                          inc r11
   307 00000324 48F7DB                          neg rbx
   308                                  
   309                                  .positive:
   310 00000327 4831D2                          xor rdx, rdx
   311 0000032A 4889D8                          mov rax, rbx
   312 0000032D BB0A000000                      mov rbx, 10
   313 00000332 48F7F3                          div rbx                                         ; rax - quotient, rdx - remainder
   314                                  
   315 00000335 4889C3                          mov rbx, rax
   316 00000338 8A82[0E000000]                  mov al, [digits + rdx]                          ; ASCII
   317 0000033E 418885[1E000000]                mov [buffer + r13], al
   318 00000345 49FFC5                          inc r13
   319 00000348 4883FB00                        cmp rbx, 0
   320 0000034C 7FD9                            jg .positive                                    ; signed greater
   321                                  
   322 0000034E 4155                            push r13
   323                                  
   324                                  .turn_over:
   325 00000350 4D39EB                          cmp r11, r13
   326 00000353 7D24                            jge .exit
   327                                  
   328 00000355 418A85[1D000000]                mov al, [buffer + r13 - 1]
   329 0000035C 418A9B[1E000000]                mov bl, [buffer + r11]
   330 00000363 41889D[1D000000]                mov [buffer + r13 - 1], bl
   331 0000036A 418883[1E000000]                mov [buffer + r11], al
   332                                  
   333 00000371 49FFC3                          inc r11
   334 00000374 49FFCD                          dec r13
   335 00000377 EBD7                            jmp .turn_over
   336                                  
   337                                  .exit:
   338 00000379 415B                            pop r11
   339                                  
   340 0000037B C3                              ret
   341                                  
   342                                  
   343                                  section .data
   344                                  
   345                                  ASCII_NULL      equ  "0"
   346                                  ASCII_NINE      equ  "9"
   347                                  ASCII_A         equ  "A"
   348                                  ASCII_F         equ  "F"
   349                                  ASCII_SPACE     equ  " "
   350                                  ASCII_SL_N      equ  0Ah
   351                                  ASCII_SL_R      equ  0Dh
   352                                  
   353                                  BUFFER_SIZE     equ  102                               ; Linux page memory size (4096 bytes)
   354                                  
   355 00000000 53796E746178206572-     ErrorMessage    db      "Syntax error!", 0xA
   355 00000009 726F72210A         
   356                                  ErrorMessageLen equ      $ - ErrorMessage
   357                                  
   358 0000000E 303132333435363738-     digits:         db      "0123456789abcdef"
   358 00000017 39616263646566     
   359 0000001E 00<rep 66h>             buffer          times   BUFFER_SIZE  db  0              ; BUFFER_SIZE times 0 byte
   360 00000084 0000000000000000        buf_position:   dq      0                               ; 8 byte (to match the size of the registers)
   361                                  
   362                                  jump_table:
   363 0000008C [FB00000000000000]                              dq Binary
   364 00000094 [2201000000000000]                              dq Char
   365 0000009C [5C01000000000000]                              dq Decimal
   366 000000A4 [CE00000000000000]-      times ('o' - 'd' - 1)  dq Error
   366 000000A4 <rep Ah>           
   367 000000F4 [7E01000000000000]                              dq Octal
   368 000000FC [CE00000000000000]-      times ('s' - 'o' - 1)  dq Error
   368 000000FC <rep 3h>           
   369 00000114 [CC01000000000000]                              dq String
   370 0000011C [CE00000000000000]-      times ('x' - 's' - 1)  dq Error
   370 0000011C <rep 4h>           
   371 0000013C [A501000000000000]                              dq Hexademical
