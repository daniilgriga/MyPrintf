     1                                  
     2                                  ; |=================================================|
     3                                  ; | <---------------------------------------------> |
     4                                  ; | <------------> MyPrintf FUNCTION <------------> |
     5                                  ; | <---------------------------------------------> |
     6                                  ; |=================================================|
     7                                  
     8                                  section .text
     9                                  
    10                                  global MyPrintf
    11                                  
    12                                  MyPrintf:
    13                                  
    14 00000000 415F                            pop r15                                         ; return address
    15                                  
    16 00000002 4151                            push r9                                         ; 6th argument
    17 00000004 4150                            push r8                                         ; 5th
    18 00000006 51                              push rcx                                        ; 4th
    19 00000007 52                              push rdx                                        ; 3th
    20 00000008 56                              push rsi                                        ; 2th
    21 00000009 57                              push rdi                                        ; 1th
    22                                  
    23 0000000A E810000000                      call Parcing
    24 0000000F E8C6000000                      call FlushBuffer
    25                                  
    26 00000014 5F                              pop rdi
    27 00000015 5E                              pop rsi
    28 00000016 5A                              pop rdx
    29 00000017 59                              pop rcx
    30 00000018 4158                            pop r8
    31 0000001A 4159                            pop r9
    32                                  
    33 0000001C 4157                            push r15
    34                                  
    35 0000001E C3                              ret
    36                                  
    37                                  ;=============================================================================
    38                                  ; Parcing string func
    39                                  ; Entry:
    40                                  ; Exit:
    41                                  ; Destr:                                                                   !!!
    42                                  ;=============================================================================
    43                                  Parcing:
    44                                  
    45 0000001F 55                              push rbp
    46 00000020 4889E5                          mov rbp, rsp
    47 00000023 488B7510                        mov rsi, [rbp + 16]
    48                                  
    49 00000027 E8A3010000                      call StrLen
    50                                  
    51 0000002C 4C8B1C25[0A100000]              mov r11, [buf_position]
    52                                  
    53 00000034 4C89D8                          mov rax, r11
    54 00000037 4801C8                          add rax, rcx
    55 0000003A 483D00100000                    cmp rax, BUFFER_SIZE
    56 00000040 7E0B                            jle .continue
    57                                  
    58 00000042 E893000000                      call FlushBuffer
    59 00000047 41BB00000000                    mov r11, 0
    60                                  
    61                                  .continue:
    62                                  
    63 0000004D 4D31D2                          xor r10, r10
    64 00000050 4D31E4                          xor r12, r12
    65                                  
    66                                  next_parcing:
    67 00000053 8A06                            mov al, [rsi]
    68                                  
    69 00000055 3C00                            cmp al, 0
    70 00000057 740E                            je exit_parcing
    71                                  
    72 00000059 3C25                            cmp al, '%'
    73 0000005B 740F                            je PercentHandler
    74                                  
    75 0000005D E85D000000                      call CharCopy
    76 00000062 48FFC6                          inc rsi
    77 00000065 EBEC                            jmp next_parcing
    78                                  
    79                                  exit_parcing:
    80 00000067 4889EC                          mov rsp, rbp
    81 0000006A 5D                              pop rbp
    82                                  
    83 0000006B C3                              ret
    84                                  
    85                                  PercentHandler:
    86                                  
    87 0000006C 49FFC4                          inc r12
    88 0000006F 48FFC6                          inc rsi
    89 00000072 4831C0                          xor rax, rax
    90                                  
    91 00000075 8A06                            mov al, [rsi]
    92 00000077 488B04C5[020D0000]              mov rax, [jump_table + (rax - 'b')*8]
    93 0000007F FFE0                            jmp rax
    94                                  
    95                                  Binary:
    96                                  
    97 00000081 4C8B1C25[0A100000]              mov r11, [buf_position]
    98 00000089 4A6354E510                      movsxd rdx, [rbp + 16 + r12*8]
    99                                  
   100 0000008E E87D000000                      call ConvertBin
   101                                  
   102 00000093 48FFC6                          inc rsi
   103 00000096 4C891C25[0A100000]              mov [buf_position], r11
   104 0000009E EBB3                            jmp next_parcing
   105                                  
   106                                  Char:
   107                                  
   108                                  
   109                                  Decimal:
   110                                  
   111 000000A0 4C8B1C25[0A100000]              mov r11, [buf_position]
   112 000000A8 4A6354E510                      movsxd rdx, [rbp + 16 + r12*8]                  ; save my life... (int 32 bites)
   113                                  
   114 000000AD E8A3000000                      call ConvertHex
   115                                  
   116 000000B2 48FFC6                          inc rsi
   117 000000B5 4C891C25[0A100000]              mov [buf_position], r11
   118 000000BD EB94                            jmp next_parcing
   119                                  
   120                                  
   121                                  ;=============================================================================
   122                                  ; Copy one symbol to buffer
   123                                  ; Entry:        al - symbol
   124                                  ; Exit:
   125                                  ; Destr: R11                                                               !!!
   126                                  ;=============================================================================
   127                                  CharCopy:
   128                                  
   129 000000BF 4C8B1C25[0A100000]              mov r11, [buf_position]
   130 000000C7 418883[0A000000]                mov [buffer + r11], al
   131 000000CE 49FFC3                          inc r11
   132 000000D1 4C891C25[0A100000]              mov [buf_position], r11
   133                                  
   134 000000D9 C3                              ret
   135                                  
   136                                  ;=============================================================================
   137                                  ; Func to Flush the Buffer
   138                                  ; Entry:
   139                                  ; Exit:
   140                                  ; Destr: RAX, RDI, RSI, RDX                                                !!!
   141                                  ;=============================================================================
   142                                  FlushBuffer:
   143                                  
   144 000000DA 48833C25[0A100000]-             cmp qword [buf_position], 0
   144 000000E2 00                 
   145 000000E3 742A                            je .exit
   146                                  
   147 000000E5 B801000000                      mov rax, 1
   148 000000EA BF01000000                      mov rdi, 1
   149 000000EF 48BE-                           mov rsi, buffer
   149 000000F1 [0A00000000000000] 
   150 000000F9 488B1425[0A100000]              mov rdx, [buf_position]
   151 00000101 0F05                            syscall
   152                                  
   153 00000103 48C70425[0A100000]-             mov qword [buf_position], 0
   153 0000010B 00000000           
   154                                  
   155                                  .exit:
   156 0000010F C3                              ret
   157                                  
   158                                  
   159                                  ;=============================================================================
   160                                  ; Convert Hex to good numbers
   161                                  ; Entry:        dl = number
   162                                  ;               r11 = buf_pos
   163                                  ; Exit:
   164                                  ; Destr: RBX,                                                              !!!
   165                                  ;=============================================================================
   166                                  ConvertBin:
   167                                  
   168 00000110 B91F000000                      mov rcx, 31                                     ; 31 bites (0th bit - sign)
   169                                  
   170 00000115 80FA00                          cmp dl, 0
   171 00000118 7E1B                            jng .convert
   172                                  
   173                                  .find_first:
   174 0000011A 4889D0                          mov rax, rdx
   175 0000011D 48D3E8                          shr rax, cl
   176 00000120 4883E001                        and rax, 1
   177 00000124 4883F801                        cmp rax, 1
   178 00000128 740B                            je .convert
   179 0000012A 48FFC9                          dec rcx
   180 0000012D 4883F9FF                        cmp rcx, -1
   181 00000131 7402                            je .convert
   182 00000133 EBE5                            jmp .find_first
   183                                  
   184                                  .convert:
   185 00000135 4889D0                          mov rax, rdx
   186 00000138 48D3E8                          shr rax, cl
   187 0000013B 4883E001                        and rax, 1
   188 0000013F 8A80[00000000]                  mov al, [digits + rax]                          ; ASCII
   189 00000145 418883[0A000000]                mov [buffer + r11], al
   190 0000014C 49FFC3                          inc r11
   191 0000014F 48FFC9                          dec rcx
   192 00000152 79E1                            jns .convert                                    ; checks SF flag (rcx = -1 -> SF = 1)
   193                                  
   194 00000154 C3                              ret
   195                                  
   196                                  ;=============================================================================
   197                                  ; Convert Hex to good numbers
   198                                  ; Entry:        dl = number
   199                                  ;               r11 = buf_pos
   200                                  ; Exit:
   201                                  ; Destr: RBX,                                                              !!!
   202                                  ;=============================================================================
   203                                  ConvertHex:
   204                                  
   205 00000155 4889D3                          mov rbx, rdx
   206                                  
   207 00000158 4D89DD                          mov r13, r11
   208 0000015B 80FA00                          cmp dl, 0
   209 0000015E 7D11                            jge .positive                                   ; >= 0
   210                                  
   211 00000160 41C685[0A000000]2D              mov byte [buffer + r13], '-'
   212 00000168 49FFC5                          inc r13
   213 0000016B 49FFC3                          inc r11
   214 0000016E 48F7DB                          neg rbx
   215                                  
   216                                  .positive:
   217 00000171 4831D2                          xor rdx, rdx
   218 00000174 4889D8                          mov rax, rbx
   219 00000177 BB0A000000                      mov rbx, 10
   220 0000017C 48F7F3                          div rbx                                         ; rax - quotient, rdx - remainder
   221                                  
   222 0000017F 4889C3                          mov rbx, rax
   223 00000182 4831C0                          xor rax, rax
   224 00000185 8A82[00000000]                  mov al, [digits + rdx]                          ; ASCII
   225 0000018B 418885[0A000000]                mov [buffer + r13], al
   226 00000192 49FFC5                          inc r13
   227 00000195 4883FB00                        cmp rbx, 0
   228 00000199 7FD6                            jg .positive                                    ; signed greater
   229                                  
   230 0000019B 4831C0                          xor rax, rax
   231 0000019E 4831DB                          xor rbx, rbx
   232                                  
   233 000001A1 4155                            push r13
   234                                  
   235                                  .turn_over:
   236 000001A3 4D39EB                          cmp r11, r13
   237 000001A6 7D24                            jge .exit
   238                                  
   239 000001A8 418A85[09000000]                mov al, [buffer + r13 - 1]
   240 000001AF 418A9B[0A000000]                mov bl, [buffer + r11]
   241 000001B6 41889D[09000000]                mov [buffer + r13 - 1], bl
   242 000001BD 418883[0A000000]                mov [buffer + r11], al
   243                                  
   244 000001C4 49FFC3                          inc r11
   245 000001C7 49FFCD                          dec r13
   246 000001CA EBD7                            jmp .turn_over
   247                                  
   248                                  .exit:
   249 000001CC 415B                            pop r11
   250                                  
   251 000001CE C3                              ret
   252                                  
   253                                  ;=============================================================================
   254                                  ; Count length of string
   255                                  ; Entry:        rsi = string offset
   256                                  ; Exit:         rcx = length of string
   257                                  ; Destr: AL                                                                !!!
   258                                  ;=============================================================================
   259                                  StrLen:
   260                                  
   261 000001CF 53                              push rbx
   262 000001D0 4889F3                          mov rbx, rsi
   263 000001D3 4831C9                          xor rcx, rcx
   264                                  .cycle:
   265 000001D6 8A03                            mov al, [rbx]
   266 000001D8 3C00                            cmp al, 0
   267 000001DA 7407                            je .match
   268                                  
   269 000001DC FEC1                            inc cl
   270 000001DE 48FFC3                          inc rbx
   271 000001E1 EBF3                            jmp .cycle
   272                                  
   273                                  .match:
   274 000001E3 5B                              pop rbx
   275                                  
   276 000001E4 C3                              ret
   277                                  
   278                                  
   279                                  
   280                                  section .data
   281                                  
   282                                  ASCII_NULL      equ  "0"
   283                                  ASCII_NINE      equ  "9"
   284                                  ASCII_A         equ  "A"
   285                                  ASCII_F         equ  "F"
   286                                  ASCII_SPACE     equ  " "
   287                                  ASCII_SL_N      equ  0Ah
   288                                  ASCII_SL_R      equ  0Dh
   289                                  
   290                                  BUFFER_SIZE     equ  4096                               ; Linux page memory size
   291                                  
   292 00000000 303132333435363738-     digits          db "0123456789"
   292 00000009 39                 
   293                                  
   294                                  buffer:
   295 0000000A 00<rep 1000h>                   times BUFFER_SIZE  db  0                        ; BUFFER_SIZE times 0 byte
   296                                  
   297                                  buf_position:
   298 0000100A 0000000000000000                dq  0                                           ; 8 byte (to match the size of the registers)
   299                                  
   300                                  jump_table:
   301 00001012 [8100000000000000]                               dq Binary
   302 0000101A [A000000000000000]                               dq Char
   303 00001022 [A000000000000000]                               dq Decimal
   304                                  ;  times ('o' - 'd' - 1) dq Error
   305                                  ;                        dq Octal
   306                                  ;  times ('s' - 'o' - 1) dq Error
   307                                  ;                        dq String
   308                                  ;  times ('x' - 's' - 1) dq Error
   309                                  ;                        dq Hexademical
