     1                                  
     2                                  ; |=================================================|
     3                                  ; |                                                 |
     4                                  ; |                MyPrintf FUNCTION                |
     5                                  ; |                                                 |
     6                                  ; |=================================================|
     7                                  
     8                                  section .text
     9                                  
    10                                  global MyPrintf
    11                                  
    12                                  MyPrintf:
    13                                  
    14 00000000 55                              push rbp
    15 00000001 4889E5                          mov rbp, rsp
    16 00000004 4883EC08                        sub rsp, 8                                      ; stack alignment on 16-byte boundary
    17                                  
    18 00000008 53                              push rbx                                        ; save
    19 00000009 4153                            push r11                                        ; save
    20                                  
    21 0000000B 4889FB                          mov rbx, rdi                                    ; save string address
    22 0000000E 4889DE                          mov rsi, rbx
    23                                  
    24 00000011 E88C000000                      call StrLen
    25                                  
    26 00000016 E80D000000                      call StringParcing
    27 0000001B E84C000000                      call FlushBuffer
    28                                  
    29 00000020 415B                            pop r11
    30 00000022 5B                              pop rbx
    31                                  
    32 00000023 4889EC                          mov rsp, rbp
    33 00000026 5D                              pop rbp
    34                                  
    35 00000027 C3                              ret
    36                                  
    37                                  ;=============================================================================
    38                                  ;
    39                                  ; Entry:
    40                                  ; Exit:
    41                                  ; Destr:                                                                   !!!
    42                                  ;=============================================================================
    43                                  StringParcing:
    44                                  
    45 00000028 4C8B1C25[00100000]              mov r11, [buf_position]
    46                                  
    47 00000030 4C89D8                          mov rax, r11
    48 00000033 4801C8                          add rax, rcx
    49 00000036 483D00100000                    cmp rax, BUFFER_SIZE
    50 0000003C 7E0B                            jle .continue
    51                                  
    52 0000003E E829000000                      call FlushBuffer
    53 00000043 41BB00000000                    mov r11, 0
    54                                  
    55                                  .continue:
    56 00000049 4831C0                          xor rax, rax
    57                                  
    58                                  .copy:
    59 0000004C 4839C8                          cmp rax, rcx
    60 0000004F 7412                            je .exit
    61                                  
    62 00000051 8A1403                          mov dl, [rbx + rax]
    63 00000054 418893[00000000]                mov [buffer + r11], dl
    64 0000005B 48FFC0                          inc rax
    65 0000005E 49FFC3                          inc r11
    66 00000061 EBE9                            jmp .copy
    67                                  
    68                                  .exit:
    69 00000063 4C891C25[00100000]              mov [buf_position], r11
    70                                  
    71 0000006B C3                              ret
    72                                  
    73                                  ;=============================================================================
    74                                  ;
    75                                  ; Entry:
    76                                  ; Exit:
    77                                  ; Destr:                                                                   !!!
    78                                  ;=============================================================================
    79                                  FlushBuffer:
    80                                  
    81 0000006C 48833C25[00100000]-             cmp qword [buf_position], 0
    81 00000074 00                 
    82 00000075 742A                            je .exit
    83                                  
    84 00000077 B801000000                      mov rax, 1
    85 0000007C BF01000000                      mov rdi, 1
    86 00000081 48BE-                           mov rsi, buffer
    86 00000083 [0000000000000000] 
    87 0000008B 488B1425[00100000]              mov rdx, [buf_position]
    88 00000093 0F05                            syscall
    89                                  
    90 00000095 48C70425[00100000]-             mov qword [buf_position], 0
    90 0000009D 00000000           
    91                                  
    92                                  .exit:
    93 000000A1 C3                              ret
    94                                  
    95                                  ;=============================================================================
    96                                  ; Count length of string
    97                                  ; Entry:        rsi = string offset
    98                                  ; Exit:         rcx = length of string
    99                                  ; Destr: AL                                                                !!!
   100                                  ;=============================================================================
   101                                  StrLen:
   102                                  
   103 000000A2 53                              push rbx
   104 000000A3 4889F3                          mov rbx, rsi
   105 000000A6 4831C9                          xor rcx, rcx
   106                                  .cycle:
   107 000000A9 8A03                            mov al, [rbx]
   108 000000AB 3C00                            cmp al, 0
   109 000000AD 7407                            je .match
   110                                  
   111 000000AF FEC1                            inc cl
   112 000000B1 48FFC3                          inc rbx
   113 000000B4 EBF3                            jmp .cycle
   114                                  
   115                                  .match:
   116 000000B6 5B                              pop rbx
   117                                  
   118 000000B7 C3                              ret
   119                                  
   120                                  section .data
   121                                  
   122                                          BUFFER_SIZE  equ  4096                          ; Linux page memory size
   123                                  
   124                                  buffer:
   125 00000000 00<rep 1000h>                   times BUFFER_SIZE  db  0                        ; BUFFER_SIZE times 0 byte
   126                                  
   127                                  buf_position:
   128 00001000 0000000000000000                dq  0                                           ; 8 byte (to match the size of the registers)
   129                                  
