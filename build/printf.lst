     1                                  
     2                                  ; |=================================================|
     3                                  ; | <---------------------------------------------> |
     4                                  ; | <------------> MyPrintf FUNCTION <------------> |
     5                                  ; | <---------------------------------------------> |
     6                                  ; |=================================================|
     7                                  
     8                                  section .text
     9                                  
    10                                  global MyPrintf
    11                                  
    12                                  MyPrintf:
    13                                  
    14 00000000 415A                            pop r10                                         ; return address
    15                                  
    16 00000002 4151                            push r9                                         ; 6th argument
    17 00000004 4150                            push r8                                         ; 5th
    18 00000006 51                              push rcx                                        ; 4th
    19 00000007 52                              push rdx                                        ; 3th
    20 00000008 56                              push rsi                                        ; 2th
    21 00000009 57                              push rdi                                        ; 1th
    22                                  
    23 0000000A EB0B                            jmp Parsing
    24                                  
    25                                  return:
    26 0000000C 5F                              pop rdi
    27 0000000D 5E                              pop rsi
    28 0000000E 5A                              pop rdx
    29 0000000F 59                              pop rcx
    30 00000010 4158                            pop r8
    31 00000012 4159                            pop r9
    32                                  
    33 00000014 4152                            push r10
    34                                  
    35 00000016 C3                              ret
    36                                  
    37                                  ;=============================================================================
    38                                  ; Parsing string func
    39                                  ; Entry:        all arguments in stack
    40                                  ; Exit:
    41                                  ; Destr:                                                                   !!!
    42                                  ;=============================================================================
    43                                  Parsing:
    44                                  
    45 00000017 55                              push rbp
    46 00000018 4889E5                          mov rbp, rsp
    47 0000001B 488B7508                        mov rsi, [rbp + 8]
    48                                  
    49 0000001F E84E030000                      call StrLen
    50                                  
    51 00000024 4C8B1C25[1E100000]              mov r11, [buf_position]
    52                                  
    53 0000002C 4C89D8                          mov rax, r11
    54 0000002F 4801C8                          add rax, rcx
    55 00000032 483D00100000                    cmp rax, BUFFER_SIZE
    56 00000038 7E0D                            jle .continue
    57                                  
    58 0000003A E8A8010000                      call FlushBuffer
    59 0000003F C60425[1E100000]00              mov byte [buf_position], 0
    60                                  
    61                                  .continue:
    62 00000047 4D31E4                          xor r12, r12
    63                                  
    64                                  next_parsing:
    65 0000004A 8A06                            mov al, [rsi]
    66                                  
    67 0000004C 3C00                            cmp al, 0
    68 0000004E 740E                            je exit_parsing
    69                                  
    70 00000050 3C25                            cmp al, '%'
    71 00000052 741D                            je PercentHandler
    72                                  
    73 00000054 E873010000                      call CharCopy
    74 00000059 48FFC6                          inc rsi
    75 0000005C EBEC                            jmp next_parsing
    76                                  
    77                                  exit_parsing:
    78 0000005E 483D9A020000                    cmp rax, 666                                    ; if error code
    79 00000064 7405                            je .skip_flush
    80 00000066 E87C010000                      call FlushBuffer
    81                                  
    82                                  .skip_flush:
    83 0000006B 4889EC                          mov rsp, rbp
    84 0000006E 5D                              pop rbp
    85 0000006F EB9B                            jmp return
    86                                  
    87                                  PercentHandler:
    88 00000071 49FFC4                          inc r12
    89 00000074 48FFC6                          inc rsi
    90 00000077 4831C0                          xor rax, rax                                    ; arg must be > '%' and < 'x'
    91                                  
    92 0000007A 8A06                            mov al, [rsi]
    93                                  
    94 0000007C 3C25                            cmp al, '%'
    95 0000007E 750D                            jne .skip_percent
    96                                  
    97 00000080 E847010000                      call CharCopy
    98 00000085 48FFC6                          inc rsi
    99 00000088 49FFCC                          dec r12
   100 0000008B EBBD                            jmp next_parsing
   101                                  
   102                                  .skip_percent:
   103 0000008D 488B04C5[220D0000]              mov rax, [jump_table + (rax - 'b')*8]
   104 00000095 FFE0                            jmp rax
   105                                  
   106                                  Error:
   107 00000097 B801000000                      mov rax, 0x01
   108 0000009C BF01000000                      mov rdi, 1
   109 000000A1 48BE-                           mov rsi, ErrorMessage
   109 000000A3 [0000000000000000] 
   110 000000AB BA0E000000                      mov rdx, ErrorMessageLen
   111 000000B0 0F05                            syscall
   112                                  
   113 000000B2 C60425[1E100000]00              mov byte [buf_position], 0
   114                                  
   115 000000BA B89A020000                      mov rax, 666                                    ; error code
   116 000000BF EB9D                            jmp exit_parsing
   117                                  
   118                                  Binary:
   119 000000C1 4C8B1C25[1E100000]              mov r11, [buf_position]
   120 000000C9 4A635CE508                      movsxd rbx, [rbp + 8 + r12*8]
   121 000000CE BF02000000                      mov rdi, 2
   122                                  
   123 000000D3 E845010000                      call GlobalConverter
   124                                  
   125 000000D8 49FFC3                          inc r11
   126 000000DB 48FFC6                          inc rsi
   127 000000DE 4C891C25[1E100000]              mov [buf_position], r11
   128 000000E6 E95FFFFFFF                      jmp next_parsing
   129                                  
   130                                  Char:
   131 000000EB 4A6344E508                      movsxd rax, [rbp + 8 + r12*8]
   132                                  
   133 000000F0 E8D7000000                      call CharCopy
   134                                  
   135 000000F5 48FFC6                          inc rsi
   136 000000F8 E94DFFFFFF                      jmp next_parsing
   137                                  
   138                                  Decimal:
   139 000000FD 4C8B1C25[1E100000]              mov r11, [buf_position]
   140 00000105 4A6354E508                      movsxd rdx, dword [rbp + 8 + r12*8]             ; save my life... (int 32 bites)
   141                                  
   142 0000010A E8F1010000                      call ConvertDec
   143                                  
   144 0000010F 48FFC6                          inc rsi
   145 00000112 4C891C25[1E100000]              mov [buf_position], r11
   146 0000011A E92BFFFFFF                      jmp next_parsing
   147                                  
   148                                  Octal:
   149 0000011F 4C8B1C25[1E100000]              mov r11, [buf_position]
   150 00000127 428B5CE508                      mov ebx, [rbp + 8 + r12*8]
   151 0000012C BF08000000                      mov rdi, 8
   152                                  
   153 00000131 E8E7000000                      call GlobalConverter
   154                                  
   155 00000136 48FFC6                          inc rsi
   156                                          ;inc r11
   157 00000139 4C891C25[1E100000]              mov [buf_position], r11
   158 00000141 E904FFFFFF                      jmp next_parsing
   159                                  
   160                                  Hexademical:
   161 00000146 4C8B1C25[1E100000]              mov r11, [buf_position]
   162 0000014E 428B5CE508                      mov ebx, [rbp + 8 + r12*8]
   163 00000153 BF10000000                      mov rdi, 16
   164                                  
   165 00000158 E8C0000000                      call GlobalConverter
   166                                  
   167 0000015D 48FFC6                          inc rsi
   168                                          ;inc r11
   169 00000160 4C891C25[1E100000]              mov [buf_position], r11
   170 00000168 E9DDFEFFFF                      jmp next_parsing
   171                                  
   172                                  String:
   173 0000016D 4889F7                          mov rdi, rsi
   174 00000170 4A8B74E508                      mov rsi, [rbp + 8 + r12*8]
   175 00000175 8A06                            mov al, [rsi]
   176 00000177 3C00                            cmp al, 0
   177 00000179 0F8418FFFFFF                    je Error
   178                                  
   179 0000017F EB00                            jmp StringCopy
   180                                  
   181                                  ;=============================================================================
   182                                  ; Copy string to buffer
   183                                  ; Entry:        rsi = address
   184                                  ;               r11 = buf_position
   185                                  ; Exit:
   186                                  ; Destr: R11                                                               !!!
   187                                  ;=============================================================================
   188                                  StringCopy:
   189                                  
   190 00000181 E8EC010000                      call StrLen
   191                                  
   192                                  
   193 00000186 4C89D8                          mov rax, r11
   194 00000189 4801C8                          add rax, rcx
   195 0000018C 483D00100000                    cmp rax, BUFFER_SIZE
   196 00000192 7E0D                            jle .continue
   197                                  
   198 00000194 E84E000000                      call FlushBuffer
   199 00000199 C60425[1E100000]00              mov byte [buf_position], 0
   200                                  
   201                                  .continue:
   202 000001A1 8A06                            mov al, [rsi]
   203 000001A3 418883[1E000000]                mov [buffer + r11], al
   204 000001AA 49FFC3                          inc r11
   205 000001AD 48FFC9                          dec rcx
   206 000001B0 48FFC6                          inc rsi
   207 000001B3 4883F900                        cmp rcx, 0
   208 000001B7 75E8                            jne .continue
   209                                  
   210 000001B9 4889FE                          mov rsi, rdi
   211 000001BC 48FFC6                          inc rsi
   212 000001BF 4C891C25[1E100000]              mov [buf_position], r11
   213 000001C7 E97EFEFFFF                      jmp next_parsing
   214                                  
   215                                  ;=============================================================================
   216                                  ; Copy one symbol to buffer
   217                                  ; Entry:        al - symbol
   218                                  ; Exit:
   219                                  ; Destr: R11                                                               !!!
   220                                  ;=============================================================================
   221                                  CharCopy:
   222                                  
   223 000001CC 4C8B1C25[1E100000]              mov r11, [buf_position]
   224 000001D4 418883[1E000000]                mov [buffer + r11], al
   225 000001DB 49FFC3                          inc r11
   226 000001DE 4C891C25[1E100000]              mov [buf_position], r11
   227                                  
   228 000001E6 C3                              ret
   229                                  
   230                                  ;=============================================================================
   231                                  ; Func to Flush the Buffer
   232                                  ; Entry:
   233                                  ; Exit:
   234                                  ; Destr: RAX, RDI, RSI, RDX                                                !!!
   235                                  ;=============================================================================
   236                                  FlushBuffer:
   237                                  
   238 000001E7 48833C25[1E100000]-             cmp qword [buf_position], 0
   238 000001EF 00                 
   239 000001F0 742A                            je .exit
   240                                  
   241 000001F2 B801000000                      mov rax, 1
   242 000001F7 BF01000000                      mov rdi, 1
   243 000001FC 48BE-                           mov rsi, buffer
   243 000001FE [1E00000000000000] 
   244 00000206 488B1425[1E100000]              mov rdx, [buf_position]
   245 0000020E 0F05                            syscall
   246                                  
   247 00000210 48C70425[1E100000]-             mov qword [buf_position], 0
   247 00000218 00000000           
   248                                  
   249                                  .exit:
   250 0000021C C3                              ret
   251                                  
   252                                  ; ############################################################################
   253                                  ; Enter:        rbx = 32 bit number
   254                                  ;               rdi = base
   255                                  ;               r11 = buf_position
   256                                  ;
   257                                  ; ============================================================================
   258                                  GlobalConverter:
   259                                  
   260 0000021D 4154                            push r12
   261                                  
   262 0000021F 4989FE                          mov r14, rdi                                    ; base arg
   263 00000222 4D89DD                          mov r13, r11                                    ; buf_position arg
   264                                  
   265 00000225 B920000000                      mov rcx, 32                                     ; base 2 : count of symbols
   266 0000022A 41BF01000000                    mov r15, 1                                      ;          shift by 1 bit
   267 00000230 B801000000                      mov rax, 1                                      ;          bit mask
   268                                  
   269 00000235 4983FE08                        cmp r14, 8
   270 00000239 7512                            jne .check_base_16
   271 0000023B B90B000000                      mov rcx, 11                                     ; base 8
   272 00000240 41BF03000000                    mov r15, 3
   273 00000246 B807000000                      mov rax, 0x7
   274 0000024B EB16                            jmp .done
   275                                  
   276                                  .check_base_16:
   277 0000024D 4983FE10                        cmp r14, 16
   278 00000251 7510                            jne .done
   279 00000253 B908000000                      mov rcx, 8
   280 00000258 41BF04000000                    mov r15, 4
   281 0000025E B80F000000                      mov rax, 0xF
   282                                  
   283                                  .done:
   284 00000263 4901CD                          add r13, rcx
   285 00000266 4989C8                          mov r8, rcx
   286                                          ;mov r11, r13
   287 00000269 4983FE08                        cmp r14, 8
   288 0000026D 7423                            je .convert
   289 0000026F 4983FE10                        cmp r14, 16
   290 00000273 741D                            je .convert
   291                                  
   292                                  .find_first:
   293 00000275 4889DA                          mov rdx, rbx
   294 00000278 48D3EA                          shr rdx, cl
   295 0000027B 4821C2                          and rdx, rax
   296 0000027E 4883FA00                        cmp rdx, 0                                      ; find first 1 for leading zeros
   297 00000282 750B                            jne .okak
   298 00000284 48FFC9                          dec rcx
   299 00000287 4883F9FF                        cmp rcx, -1
   300 0000028B 7E02                            jle .okak
   301 0000028D EBE6                            jmp .find_first
   302                                  
   303                                  .okak:
   304 0000028F 4D01EB                          add r11, r13
   305                                  
   306                                  .convert:
   307 00000292 51                              push rcx
   308                                  
   309 00000293 4889DA                          mov rdx, rbx
   310 00000296 4821C2                          and rdx, rax
   311                                  
   312 00000299 8A8A[0E000000]                  mov cl, [digits + rdx]                          ; ASCII
   313 0000029F 41888D[1E000000]                mov [buffer + r13], cl
   314                                  
   315 000002A6 4488F9                          mov cl, r15b
   316 000002A9 48D3EB                          shr rbx, cl
   317 000002AC 49FFCD                          dec r13
   318                                  
   319 000002AF 59                              pop rcx
   320 000002B0 48FFC9                          dec rcx
   321                                  
   322 000002B3 7DDD                            jge .convert
   323                                  
   324 000002B5 4983FE08                        cmp r14, 8
   325 000002B9 7408                            je .lead_zeros
   326 000002BB 4983FE10                        cmp r14, 16
   327 000002BF 7402                            je .lead_zeros
   328                                  
   329 000002C1 EB3A                            jmp .exit
   330                                  
   331                                  .lead_zeros:
   332 000002C3 4D89DD                          mov r13, r11
   333 000002C6 4C89C1                          mov rcx, r8
   334                                  
   335                                  .find_non_zero:
   336 000002C9 4180BD[1E000000]30              cmp byte [buffer + r13], '0'
   337 000002D1 7508                            jne .copy_result
   338 000002D3 49FFC5                          inc r13
   339 000002D6 48FFC9                          dec rcx
   340 000002D9 75EE                            jnz .find_non_zero
   341                                  
   342                                  .copy_result:
   343 000002DB 4D89E9                          mov r9, r13
   344 000002DE 4D89DD                          mov r13, r11
   345                                  .copy_loop:
   346 000002E1 418A81[1E000000]                mov al, [buffer + r9]
   347 000002E8 418885[1E000000]                mov [buffer + r13], al
   348 000002EF 49FFC1                          inc r9
   349 000002F2 49FFC5                          inc r13
   350 000002F5 48FFC9                          dec rcx
   351 000002F8 7DE7                            jge .copy_loop
   352 000002FA 4D89EB                          mov r11, r13
   353                                  
   354                                  .exit:
   355 000002FD 415C                            pop r12
   356 000002FF C3                              ret
   357                                  
   358                                  ; ############################################################################
   359                                  
   360                                  
   361                                  ;=============================================================================
   362                                  ; Convert Hex to good numbers
   363                                  ; Entry:        dl = number
   364                                  ;               r11 = buf_pos
   365                                  ; Exit:
   366                                  ; Destr: RBX, RAX, RCX, RDX                                                !!!
   367                                  ;=============================================================================
   368                                  ConvertDec:
   369                                  
   370 00000300 4889D3                          mov rbx, rdx
   371                                  
   372 00000303 4D89DD                          mov r13, r11
   373 00000306 4883FB00                        cmp rbx, 0
   374 0000030A 7D11                            jge .positive                                   ; >= 0
   375                                  
   376 0000030C 41C685[1E000000]2D              mov byte [buffer + r13], '-'
   377 00000314 49FFC5                          inc r13
   378 00000317 49FFC3                          inc r11
   379 0000031A 48F7DB                          neg rbx
   380                                  
   381                                  .positive:
   382 0000031D 4831D2                          xor rdx, rdx
   383 00000320 4889D8                          mov rax, rbx
   384 00000323 BB0A000000                      mov rbx, 10
   385 00000328 48F7F3                          div rbx                                         ; rax - quotient, rdx - remainder
   386                                  
   387 0000032B 4889C3                          mov rbx, rax
   388 0000032E 8A82[0E000000]                  mov al, [digits + rdx]                          ; ASCII
   389 00000334 418885[1E000000]                mov [buffer + r13], al
   390 0000033B 49FFC5                          inc r13
   391 0000033E 4883FB00                        cmp rbx, 0
   392 00000342 7FD9                            jg .positive                                    ; signed greater
   393                                  
   394 00000344 4155                            push r13
   395                                  
   396                                  .turn_over:
   397 00000346 4D39EB                          cmp r11, r13
   398 00000349 7D24                            jge .exit
   399                                  
   400 0000034B 418A85[1D000000]                mov al, [buffer + r13 - 1]
   401 00000352 418A9B[1E000000]                mov bl, [buffer + r11]
   402 00000359 41889D[1D000000]                mov [buffer + r13 - 1], bl
   403 00000360 418883[1E000000]                mov [buffer + r11], al
   404                                  
   405 00000367 49FFC3                          inc r11
   406 0000036A 49FFCD                          dec r13
   407 0000036D EBD7                            jmp .turn_over
   408                                  
   409                                  .exit:
   410 0000036F 415B                            pop r11
   411                                  
   412 00000371 C3                              ret
   413                                  
   414                                  ;=============================================================================
   415                                  ; Count length of string
   416                                  ; Entry:        rsi = string offset
   417                                  ; Exit:         rcx = length of string
   418                                  ; Destr: AL                                                                !!!
   419                                  ;=============================================================================
   420                                  StrLen:
   421                                  
   422 00000372 53                              push rbx
   423 00000373 4889F3                          mov rbx, rsi
   424 00000376 4831C9                          xor rcx, rcx
   425                                  .cycle:
   426 00000379 8A03                            mov al, [rbx]
   427 0000037B 3C00                            cmp al, 0
   428 0000037D 7407                            je .match
   429                                  
   430 0000037F FEC1                            inc cl
   431 00000381 48FFC3                          inc rbx
   432 00000384 EBF3                            jmp .cycle
   433                                  
   434                                  .match:
   435 00000386 5B                              pop rbx
   436                                  
   437 00000387 C3                              ret
   438                                  
   439                                  section .data
   440                                  
   441                                  ASCII_NULL      equ  "0"
   442                                  ASCII_NINE      equ  "9"
   443                                  ASCII_A         equ  "A"
   444                                  ASCII_F         equ  "F"
   445                                  ASCII_SPACE     equ  " "
   446                                  ASCII_SL_N      equ  0Ah
   447                                  ASCII_SL_R      equ  0Dh
   448                                  
   449                                  BUFFER_SIZE     equ  4096                               ; Linux page memory size
   450                                  
   451 00000000 53796E746178206572-     ErrorMessage    db      "Syntax error!", 0xA
   451 00000009 726F72210A         
   452                                  ErrorMessageLen equ      $ - ErrorMessage
   453                                  
   454 0000000E 303132333435363738-     digits:         db      "0123456789ABCDEF"
   454 00000017 39414243444546     
   455 0000001E 00<rep 1000h>           buffer          times BUFFER_SIZE  db  0                ; BUFFER_SIZE times 0 byte
   456 0000101E 0000000000000000        buf_position:   dq      0                               ; 8 byte (to match the size of the registers)
   457                                  
   458 00001026 00<rep Ch>              buffer_convert  times 12  db 0
   459                                  
   460                                  jump_table:
   461 00001032 [C100000000000000]                              dq Binary
   462 0000103A [EB00000000000000]                              dq Char
   463 00001042 [FD00000000000000]                              dq Decimal
   464 0000104A [9700000000000000]-      times ('o' - 'd' - 1)  dq Error
   464 0000104A <rep Ah>           
   465 0000109A [1F01000000000000]                              dq Octal
   466 000010A2 [9700000000000000]-      times ('s' - 'o' - 1)  dq Error
   466 000010A2 <rep 3h>           
   467 000010BA [6D01000000000000]                              dq String
   468 000010C2 [9700000000000000]-      times ('x' - 's' - 1)  dq Error
   468 000010C2 <rep 4h>           
   469 000010E2 [4601000000000000]                              dq Hexademical
   470                                  
   471                                  ; NOTE: tramplin - call -> jump
   472                                  ; ded checks %c, %s, jmptbl
