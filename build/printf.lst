     1                                  
     2                                  ; |=================================================|
     3                                  ; | <---------------------------------------------> |
     4                                  ; | <------------> MyPrintf FUNCTION <------------> |
     5                                  ; | <---------------------------------------------> |
     6                                  ; |=================================================|
     7                                  
     8                                  section .text
     9                                  
    10                                  global MyPrintf
    11                                  
    12                                  MyPrintf:
    13                                  
    14 00000000 415F                            pop r15                                         ; return address
    15                                  
    16 00000002 4151                            push r9                                         ; 6th argument
    17 00000004 4150                            push r8                                         ; 5th
    18 00000006 51                              push rcx                                        ; 4th
    19 00000007 52                              push rdx                                        ; 3th
    20 00000008 56                              push rsi                                        ; 2th
    21 00000009 57                              push rdi                                        ; 1th
    22                                  
    23 0000000A E818000000                      call Parcing
    24                                  
    25 0000000F 483D9A020000                    cmp rax, 666                                    ; if error code
    26 00000015 7405                            je .exit
    27                                  
    28 00000017 E817010000                      call FlushBuffer
    29                                  
    30                                  .exit:
    31 0000001C 5F                              pop rdi
    32 0000001D 5E                              pop rsi
    33 0000001E 5A                              pop rdx
    34 0000001F 59                              pop rcx
    35 00000020 4158                            pop r8
    36 00000022 4159                            pop r9
    37                                  
    38 00000024 4157                            push r15
    39                                  
    40 00000026 C3                              ret
    41                                  
    42                                  ;=============================================================================
    43                                  ; Parcing string func
    44                                  ; Entry:        all arguments in stack
    45                                  ; Exit:
    46                                  ; Destr:                                                                   !!!
    47                                  ;=============================================================================
    48                                  Parcing:
    49                                  
    50 00000027 55                              push rbp
    51 00000028 4889E5                          mov rbp, rsp
    52 0000002B 488B7510                        mov rsi, [rbp + 16]
    53                                  
    54 0000002F E8F4010000                      call StrLen
    55                                  
    56 00000034 4C8B1C25[17100000]              mov r11, [buf_position]
    57                                  
    58 0000003C 4C89D8                          mov rax, r11
    59 0000003F 4801C8                          add rax, rcx
    60 00000042 483D00100000                    cmp rax, BUFFER_SIZE
    61 00000048 7E0B                            jle .continue
    62                                  
    63 0000004A E8E4000000                      call FlushBuffer
    64 0000004F 41BB00000000                    mov r11, 0
    65                                  
    66                                  .continue:
    67                                  
    68 00000055 4D31D2                          xor r10, r10
    69 00000058 4D31E4                          xor r12, r12
    70                                  
    71                                  next_parcing:
    72 0000005B 8A06                            mov al, [rsi]
    73                                  
    74 0000005D 3C00                            cmp al, 0
    75 0000005F 740E                            je exit_parcing
    76                                  
    77 00000061 3C25                            cmp al, '%'
    78 00000063 740F                            je PercentHandler
    79                                  
    80 00000065 E8AE000000                      call CharCopy
    81 0000006A 48FFC6                          inc rsi
    82 0000006D EBEC                            jmp next_parcing
    83                                  
    84                                  exit_parcing:
    85 0000006F 4889EC                          mov rsp, rbp
    86 00000072 5D                              pop rbp
    87                                  
    88 00000073 C3                              ret
    89                                  
    90                                  PercentHandler:
    91 00000074 49FFC4                          inc r12
    92 00000077 48FFC6                          inc rsi
    93 0000007A 4831C0                          xor rax, rax
    94                                  
    95 0000007D 8A06                            mov al, [rsi]
    96 0000007F 488B04C5[0F0D0000]              mov rax, [jump_table + (rax - 'b')*8]
    97 00000087 FFE0                            jmp rax
    98                                  
    99                                  Error:
   100 00000089 B801000000                      mov rax, 0x01
   101 0000008E BF01000000                      mov rdi, 1
   102 00000093 48BE-                           mov rsi, ErrorMessage
   102 00000095 [0000000000000000] 
   103 0000009D BA0D000000                      mov rdx, ErrorMessageLen
   104 000000A2 0F05                            syscall
   105                                  
   106 000000A4 B89A020000                      mov rax, 666                                    ; error code
   107 000000A9 EBC4                            jmp exit_parcing
   108                                  
   109                                  Binary:
   110 000000AB 4C8B1C25[17100000]              mov r11, [buf_position]
   111 000000B3 4A6354E510                      movsxd rdx, [rbp + 16 + r12*8]
   112                                  
   113 000000B8 E8AC000000                      call ConvertBin
   114                                  
   115 000000BD 48FFC6                          inc rsi
   116 000000C0 4C891C25[17100000]              mov [buf_position], r11
   117 000000C8 EB91                            jmp next_parcing
   118                                  
   119                                  Char:
   120 000000CA 4A6344E510                      movsxd rax, [rbp + 16 + r12*8]
   121                                  
   122 000000CF E844000000                      call CharCopy
   123                                  
   124 000000D4 48FFC6                          inc rsi
   125 000000D7 EB82                            jmp next_parcing
   126                                  
   127                                  Decimal:
   128 000000D9 4C8B1C25[17100000]              mov r11, [buf_position]
   129 000000E1 4A6354E510                      movsxd rdx, [rbp + 16 + r12*8]                  ; save my life... (int 32 bites)
   130                                  
   131 000000E6 E8C3000000                      call ConvertDec
   132                                  
   133 000000EB 48FFC6                          inc rsi
   134 000000EE 4C891C25[17100000]              mov [buf_position], r11
   135 000000F6 E960FFFFFF                      jmp next_parcing
   136                                  
   137                                  Octal:
   138 000000FB 4C8B1C25[17100000]              mov r11, [buf_position]
   139 00000103 4A6354E510                      movsxd rdx, [rbp + 16 + r12*8]
   140                                  
   141                                          ;call ConvertOct
   142                                  
   143 00000108 48FFC6                          inc rsi
   144 0000010B 4C891C25[17100000]              mov [buf_position], r11
   145 00000113 E943FFFFFF                      jmp next_parcing
   146                                  
   147                                  ;=============================================================================
   148                                  ; Copy one symbol to buffer
   149                                  ; Entry:        al - symbol
   150                                  ; Exit:
   151                                  ; Destr: R11                                                               !!!
   152                                  ;=============================================================================
   153                                  CharCopy:
   154                                  
   155 00000118 4C8B1C25[17100000]              mov r11, [buf_position]
   156 00000120 418883[17000000]                mov [buffer + r11], al
   157 00000127 49FFC3                          inc r11
   158 0000012A 4C891C25[17100000]              mov [buf_position], r11
   159                                  
   160 00000132 C3                              ret
   161                                  
   162                                  ;=============================================================================
   163                                  ; Func to Flush the Buffer
   164                                  ; Entry:
   165                                  ; Exit:
   166                                  ; Destr: RAX, RDI, RSI, RDX                                                !!!
   167                                  ;=============================================================================
   168                                  FlushBuffer:
   169                                  
   170 00000133 48833C25[17100000]-             cmp qword [buf_position], 0
   170 0000013B 00                 
   171 0000013C 742A                            je .exit
   172                                  
   173 0000013E B801000000                      mov rax, 1
   174 00000143 BF01000000                      mov rdi, 1
   175 00000148 48BE-                           mov rsi, buffer
   175 0000014A [1700000000000000] 
   176 00000152 488B1425[17100000]              mov rdx, [buf_position]
   177 0000015A 0F05                            syscall
   178                                  
   179 0000015C 48C70425[17100000]-             mov qword [buf_position], 0
   179 00000164 00000000           
   180                                  
   181                                  .exit:
   182 00000168 C3                              ret
   183                                  
   184                                  
   185                                  ;=============================================================================
   186                                  ; Convert to Binary number
   187                                  ; Entry:        dl = number
   188                                  ;               r11 = buf_pos
   189                                  ; Exit:
   190                                  ; Destr: RDX, RAX, RCX                                                     !!!
   191                                  ;=============================================================================
   192                                  ConvertBin:
   193                                  
   194 00000169 B91F000000                      mov rcx, 31                                     ; 31 bites (0th bit - sign)
   195                                  
   196 0000016E 80FA00                          cmp dl, 0
   197 00000171 7E1B                            jng .convert
   198                                  
   199                                  .find_first:
   200 00000173 4889D0                          mov rax, rdx
   201 00000176 48D3E8                          shr rax, cl
   202 00000179 4883E001                        and rax, 1
   203 0000017D 4883F801                        cmp rax, 1                                      ; find first 1 for leading zeros
   204 00000181 740B                            je .convert
   205 00000183 48FFC9                          dec rcx
   206 00000186 4883F9FF                        cmp rcx, -1
   207 0000018A 7402                            je .convert
   208 0000018C EBE5                            jmp .find_first
   209                                  
   210                                  .convert:
   211 0000018E 4889D0                          mov rax, rdx
   212 00000191 48D3E8                          shr rax, cl
   213 00000194 4883E001                        and rax, 1
   214 00000198 8A80[0D000000]                  mov al, [digits + rax]                          ; ASCII
   215 0000019E 418883[17000000]                mov [buffer + r11], al
   216 000001A5 49FFC3                          inc r11
   217 000001A8 48FFC9                          dec rcx
   218 000001AB 79E1                            jns .convert                                    ; checks SF flag (rcx = -1 -> SF = 1)
   219                                  
   220 000001AD C3                              ret
   221                                  
   222                                  ;=============================================================================
   223                                  ; Convert Hex to good numbers
   224                                  ; Entry:        dl = number
   225                                  ;               r11 = buf_pos
   226                                  ; Exit:
   227                                  ; Destr: RBX, RAX, RCX, RDX                                                !!!
   228                                  ;=============================================================================
   229                                  ConvertDec:
   230                                  
   231 000001AE 4889D3                          mov rbx, rdx
   232                                  
   233 000001B1 4D89DD                          mov r13, r11
   234 000001B4 80FA00                          cmp dl, 0
   235 000001B7 7D11                            jge .positive                                   ; >= 0
   236                                  
   237 000001B9 41C685[17000000]2D              mov byte [buffer + r13], '-'
   238 000001C1 49FFC5                          inc r13
   239 000001C4 49FFC3                          inc r11
   240 000001C7 48F7DB                          neg rbx
   241                                  
   242                                  .positive:
   243 000001CA 4831D2                          xor rdx, rdx
   244 000001CD 4889D8                          mov rax, rbx
   245 000001D0 BB0A000000                      mov rbx, 10
   246 000001D5 48F7F3                          div rbx                                         ; rax - quotient, rdx - remainder
   247                                  
   248 000001D8 4889C3                          mov rbx, rax
   249 000001DB 4831C0                          xor rax, rax
   250 000001DE 8A82[0D000000]                  mov al, [digits + rdx]                          ; ASCII
   251 000001E4 418885[17000000]                mov [buffer + r13], al
   252 000001EB 49FFC5                          inc r13
   253 000001EE 4883FB00                        cmp rbx, 0
   254 000001F2 7FD6                            jg .positive                                    ; signed greater
   255                                  
   256 000001F4 4831C0                          xor rax, rax
   257 000001F7 4831DB                          xor rbx, rbx
   258                                  
   259 000001FA 4155                            push r13
   260                                  
   261                                  .turn_over:
   262 000001FC 4D39EB                          cmp r11, r13
   263 000001FF 7D24                            jge .exit
   264                                  
   265 00000201 418A85[16000000]                mov al, [buffer + r13 - 1]
   266 00000208 418A9B[17000000]                mov bl, [buffer + r11]
   267 0000020F 41889D[16000000]                mov [buffer + r13 - 1], bl
   268 00000216 418883[17000000]                mov [buffer + r11], al
   269                                  
   270 0000021D 49FFC3                          inc r11
   271 00000220 49FFCD                          dec r13
   272 00000223 EBD7                            jmp .turn_over
   273                                  
   274                                  .exit:
   275 00000225 415B                            pop r11
   276                                  
   277 00000227 C3                              ret
   278                                  
   279                                  ;=============================================================================
   280                                  ; Count length of string
   281                                  ; Entry:        rsi = string offset
   282                                  ; Exit:         rcx = length of string
   283                                  ; Destr: AL                                                                !!!
   284                                  ;=============================================================================
   285                                  StrLen:
   286                                  
   287 00000228 53                              push rbx
   288 00000229 4889F3                          mov rbx, rsi
   289 0000022C 4831C9                          xor rcx, rcx
   290                                  .cycle:
   291 0000022F 8A03                            mov al, [rbx]
   292 00000231 3C00                            cmp al, 0
   293 00000233 7407                            je .match
   294                                  
   295 00000235 FEC1                            inc cl
   296 00000237 48FFC3                          inc rbx
   297 0000023A EBF3                            jmp .cycle
   298                                  
   299                                  .match:
   300 0000023C 5B                              pop rbx
   301                                  
   302 0000023D C3                              ret
   303                                  
   304                                  
   305                                  
   306                                  section .data
   307                                  
   308                                  ASCII_NULL      equ  "0"
   309                                  ASCII_NINE      equ  "9"
   310                                  ASCII_A         equ  "A"
   311                                  ASCII_F         equ  "F"
   312                                  ASCII_SPACE     equ  " "
   313                                  ASCII_SL_N      equ  0Ah
   314                                  ASCII_SL_R      equ  0Dh
   315                                  
   316                                  BUFFER_SIZE     equ  4096                               ; Linux page memory size
   317                                  
   318 00000000 53796E746178206572-     ErrorMessage    db      "Syntax error!"
   318 00000009 726F7221           
   319                                  ErrorMessageLen equ      $ - ErrorMessage
   320                                  
   321 0000000D 303132333435363738-     digits:         db      "0123456789"
   321 00000016 39                 
   322 00000017 00<rep 1000h>           buffer          times BUFFER_SIZE  db  0                ; BUFFER_SIZE times 0 byte
   323 00001017 0000000000000000        buf_position:   dq      0                               ; 8 byte (to match the size of the registers)
   324                                  
   325                                  jump_table:
   326 0000101F [AB00000000000000]                              dq Binary
   327 00001027 [CA00000000000000]                              dq Char
   328 0000102F [D900000000000000]                              dq Decimal
   329 00001037 [8900000000000000]-      times ('o' - 'd' - 1)  dq Error
   329 00001037 <rep Ah>           
   330                                                         ; dq Octal
   331                                  ;  times ('s' - 'o' - 1) dq Error
   332                                  ;                        dq String
   333                                  ;  times ('x' - 's' - 1) dq Error
   334                                  ;                        dq Hexademical
